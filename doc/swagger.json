{
  "openapi": "3.0.3",
  "info": {
    "title": "Internal API documentation",
    "version": "",
    "description": "**Authentication**\nAll API methods require a simple token-based HTTP Authentication. To authenticate, put word \"Token\" and a token, separated by whitespace into the Authorization HTTP header:\n`Authorization: Token 000...`\nAll requests that fail to provide a valid authentication token will result in an HTTP 401 Unauthorized response.\n\n**Parameters Format**\n*There are two ways to pass parameters to the API methods:*\n- application/json: parameters are represented by a JSON contained in the body.\n- multipart/form-data: parameters are encoded into separate parts. This way supports uploading a photo image file in the same request.\n\n**Additional Information**\n*Standard extraction limits:*\n- Image formats: \tJPEG, PNG, WEBP\n- Maximum photo file size: \t10 MB\n- Maximum photo resolution: \t6000 pixels on the biggest side\n- Minimal size of a face: \t50x50 pixels\n\nCheck */etc/findface-extraction-api.ini* for custom definition",
    "contact": {
      "email": "support@findface.pro"
    }
  },
  "paths": {
    "/area-trigger-activations/": {
      "get": {
        "operationId": "area_trigger_activations_list",
        "description": "This method retrieves the list of area trigger activations.",
        "summary": "List area trigger activations",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active (`true`) or inactive (`false`) area trigger activations"
          },
          {
            "in": "query",
            "name": "area",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger activations related to one or multiple `area`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "duration_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `duration` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "duration_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `duration` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger's activations with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "max_body_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `max_body_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "max_body_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `max_body_count` **less than or equal** to this value"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "area-trigger-activations"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAreaTriggerActivationList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/area-trigger-activations/{id}/": {
      "get": {
        "operationId": "area_trigger_activations_retrieve",
        "description": "This method retrieves an area trigger activation by its ID.",
        "summary": "Retrieve area trigger activation by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Area trigger activation.",
            "required": true
          }
        ],
        "tags": [
          "area-trigger-activations"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaTriggerActivation"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/area-trigger-activations/count/": {
      "get": {
        "operationId": "area_trigger_activations_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active (`true`) or inactive (`false`) area trigger activations"
          },
          {
            "in": "query",
            "name": "area",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger activations related to one or multiple `area`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "duration_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `duration` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "duration_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `duration` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger's activations with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "max_body_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `max_body_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "max_body_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger activations with `max_body_count` **less than or equal** to this value"
          }
        ],
        "tags": [
          "area-trigger-activations"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/area-trigger-records/": {
      "get": {
        "operationId": "area_trigger_records_list",
        "description": "This method retrieves the list of area trigger records.",
        "summary": "List area trigger records.",
        "parameters": [
          {
            "in": "query",
            "name": "area",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger records related to one or multiple `area`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "area_trigger",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger records related to one or multiple `area trigger activation`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "body_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger records with `body_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "body_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger records with `body_count` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger's records with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "area-trigger-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAreaTriggerRecordList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/area-trigger-records/{id}/": {
      "get": {
        "operationId": "area_trigger_records_retrieve",
        "description": "This method retrieves an area trigger record by its ID.",
        "summary": "Retrieve area trigger record by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Area trigger record.",
            "required": true
          }
        ],
        "tags": [
          "area-trigger-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaTriggerRecord"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/area-trigger-records/count/": {
      "get": {
        "operationId": "area_trigger_records_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "area",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger records related to one or multiple `area`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "area_trigger",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger records related to one or multiple `area trigger activation`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "body_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger records with `body_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "body_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select area trigger records with `body_count` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select area trigger's records with provided ids",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "area-trigger-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/areas/": {
      "get": {
        "operationId": "areas_list",
        "description": "This method retrieves the list of areas.",
        "summary": "List areas",
        "parameters": [
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get areas associated with cameras from `camera_group`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get areas associated with `camera`. Pass comma separated values to select areas related to multiple `camera`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only enabled (`true`) or disabled (`false`) areas"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select areas with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "multi_camera",
            "schema": {
              "type": "boolean"
            },
            "description": "Select areas related to multiple cameras"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select counters where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "areas"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAreaList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "areas_create",
        "description": "This method adds a new area.",
        "summary": "Add new area",
        "tags": [
          "areas"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaRequest"
              },
              "examples": {
                "AreaInputExample": {
                  "value": {
                    "enabled": true,
                    "name": "string",
                    "trigger_count_gt": 2,
                    "trigger_count_lt": 10,
                    "trigger_time": 35,
                    "trigger_calendar": [
                      {
                        "weekdays": [
                          "Mon"
                        ],
                        "start_at": "06:00",
                        "end_at": "15:00"
                      },
                      {
                        "weekdays": [
                          "Fri"
                        ],
                        "start_at": "06:00",
                        "end_at": "14:00"
                      }
                    ],
                    "camera_roi": [
                      {
                        "camera": 1,
                        "roi": [
                          [
                            0,
                            1000
                          ],
                          [
                            1000,
                            1000
                          ],
                          [
                            1000,
                            0
                          ],
                          [
                            0,
                            0
                          ]
                        ]
                      },
                      {
                        "camera": 2,
                        "roi": [
                          [
                            506,
                            252
                          ],
                          [
                            415,
                            595
                          ],
                          [
                            773,
                            766
                          ],
                          [
                            1159,
                            713
                          ],
                          [
                            1222,
                            348
                          ]
                        ]
                      }
                    ]
                  },
                  "summary": "Area Input Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/areas/{id}/": {
      "get": {
        "operationId": "areas_retrieve",
        "description": "This method retrieves an area by its ID.",
        "summary": "Retrieve area by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Area.",
            "required": true
          }
        ],
        "tags": [
          "areas"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "areas_partial_update",
        "description": "Use this method to update an area properties.",
        "summary": "Update area properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Area.",
            "required": true
          }
        ],
        "tags": [
          "areas"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAreaRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "areas_destroy",
        "description": "Use this method to delete an area.",
        "summary": "Delete area",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Area.",
            "required": true
          }
        ],
        "tags": [
          "areas"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/areas/count/": {
      "get": {
        "operationId": "areas_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get areas associated with cameras from `camera_group`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get areas associated with `camera`. Pass comma separated values to select areas related to multiple `camera`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only enabled (`true`) or disabled (`false`) areas"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select areas with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "multi_camera",
            "schema": {
              "type": "boolean"
            },
            "description": "Select areas related to multiple cameras"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select counters where the SQL condition `name ILIKE name_contains` is true"
          }
        ],
        "tags": [
          "areas"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-logs/": {
      "get": {
        "operationId": "audit_logs_list",
        "summary": "List audit-logs",
        "parameters": [
          {
            "in": "query",
            "name": "action_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "acknowledge",
                  "auth_upload",
                  "basic_auth",
                  "close_multiple_sessions",
                  "create",
                  "destroy",
                  "list",
                  "merge",
                  "partial_update",
                  "purge",
                  "purge_all",
                  "restart",
                  "search",
                  "update",
                  "upload",
                  "verify",
                  "video_auth",
                  "video_auth_renew"
                ]
              }
            },
            "description": "Select audit-log entries with this `action_type`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "device_uid",
            "schema": {
              "type": "string"
            },
            "description": "Select audit-log entries with this `device_uid`"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select audit logs with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "object_id",
            "schema": {
              "type": "string"
            },
            "description": "Select audit-log entries with this `object_id`"
          },
          {
            "in": "query",
            "name": "object_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "area",
                  "body and body",
                  "bodycluster",
                  "bodyevent",
                  "bodyobject",
                  "camera",
                  "cameragroup",
                  "car and car",
                  "carcard",
                  "carcardattachment",
                  "carcluster",
                  "carepisode",
                  "carevent",
                  "carobject",
                  "case",
                  "caseattachment",
                  "caseparticipant",
                  "caseparticipantattachment",
                  "counter",
                  "deviceblacklistrecord",
                  "face and face",
                  "facecluster",
                  "faceevent",
                  "faceobject",
                  "ffsecauthsession",
                  "group",
                  "humancard",
                  "humancardattachment",
                  "humanepisode",
                  "license",
                  "line",
                  "report",
                  "settings",
                  "user",
                  "videoarchive",
                  "watchlist",
                  "webhook"
                ]
              }
            },
            "description": "Select audit-log entries with this `object_type`",
            "explode": true,
            "style": "form"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "request_ip",
            "schema": {
              "type": "string"
            },
            "description": "Select audit-log entries with this `request_ip`"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "description": "Select audit-log entries that matched this `user_id`"
          },
          {
            "in": "query",
            "name": "user_login",
            "schema": {
              "type": "string"
            },
            "description": "Select audit-log entries with this `user_login`"
          }
        ],
        "tags": [
          "audit-logs"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuditLogList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-logs/{id}/": {
      "get": {
        "operationId": "audit_logs_retrieve",
        "summary": "Retrieve audit-log entry by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Audit log.",
            "required": true
          }
        ],
        "tags": [
          "audit-logs"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLog"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/audit-logs/map/": {
      "get": {
        "operationId": "audit_logs_map_retrieve",
        "tags": [
          "audit-logs"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLog"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/login/": {
      "post": {
        "operationId": "auth_login_create",
        "description": "Use this method to obtain an authorization token that you can use in all other methods.\n\nTo use method you should provide basic authorization credentials:\n\n - `Username` - username of your FF.Multi account\n - `Password` - password for your FF.Multi account\n\nThis method returns a structure containing an authorization `token`.\n\nCopy its value, prepend it with \"Token\" and paste the entire thing into the **API Key** field\nin the authorization form of this documentation viewer.\n\nIf the system uses face AND password authorization - \ntogether with the Basic authorization header, \nadditionally pass the token received during face authorization in the `video_auth_token` field. \n",
        "summary": "Create authorization token from username and password",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResult"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/logout/": {
      "post": {
        "operationId": "auth_logout_create",
        "description": "This method invalidates the token that is currently in use.",
        "summary": "Invalidate currently used token",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/auth/video-auth/": {
      "post": {
        "operationId": "auth_video_auth_create",
        "description": "Use this operation to obtain an authorization token which could be used in all other operations.\n\nTo use this handler, send a video file that shows the face of the user being logged in.\n\nThis method returns a structure containing authorization `token`.\n\nCopy its value, prepend it with \"Token\" and paste the entire thing into the **API Key** field\nin the authorization form of this documentation viewer.\n\nIf the system uses face and password authentication, save the token received during face authentication \n(it will be inactive until the correct password is entered) and pass it \nalong with basic authorization to the `/auth/login/` handler.\n",
        "summary": "Create auth token from user face",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VideoAuthRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResult"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/video-auth-renew/": {
      "post": {
        "operationId": "auth_video_auth_renew_create",
        "description": "Use this operation to renew an authorization token",
        "summary": "Renew auth token from user face",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VideoAuthRenewRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoAuthRenewResponse"
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "Unspecified response body"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/camera-groups/": {
      "get": {
        "operationId": "camera_groups_list",
        "description": "Use this method to list camera groups.",
        "summary": "List camera groups",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select camera groups with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `modified_date`, `name`, `active`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "camera-groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCameraGroupList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "camera_groups_create",
        "summary": "Add a new camera group",
        "tags": [
          "camera-groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraGroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGroup"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/camera-groups/{id}/": {
      "get": {
        "operationId": "camera_groups_retrieve",
        "summary": "Retrieve camera group by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera groups.",
            "required": true
          }
        ],
        "tags": [
          "camera-groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGroup"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "camera_groups_partial_update",
        "summary": "Update camera group properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera groups.",
            "required": true
          }
        ],
        "tags": [
          "camera-groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCameraGroupRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGroup"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "camera_groups_destroy",
        "summary": "Delete camera group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera groups.",
            "required": true
          }
        ],
        "tags": [
          "camera-groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/camera-groups/count/": {
      "get": {
        "operationId": "camera_groups_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select camera groups with provided ids",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "camera-groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/": {
      "get": {
        "operationId": "cameras_list",
        "description": "This method retrieves the list of cameras.",
        "summary": "List cameras",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active cameras (`true`) or inactive cameras (`false`)"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cameras included in these camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "external_detector",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only external detectors (`true`) or cameras (`false`)"
          },
          {
            "in": "query",
            "name": "external_vms",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cameras included in these `external_vms`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "external_vms_camera_id_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select camera exact with this `external_vms_camera_id`"
          },
          {
            "in": "query",
            "name": "from_external_vms",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select all cameras from external_vms. `false` - select all cameras not from external_vms."
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cameras with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select cameras where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "in": "query",
            "name": "object_type",
            "schema": {
              "type": "string"
            },
            "description": "Select cameras that support a given type of object: face, body or car"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state_color",
            "schema": {
              "type": "string"
            },
            "description": "Select cameras by status (`gray`, `red`, `yellow` or `green`)"
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCameraList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "cameras_create",
        "description": "Use this method to add a new camera.",
        "summary": "Add new camera",
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/{id}/": {
      "get": {
        "operationId": "cameras_retrieve",
        "description": "This method retrieves a camera by its ID.",
        "summary": "Retrieve camera by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "cameras_update",
        "description": "Use this method to update a camera properties.",
        "summary": "Update camera properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CameraRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "cameras_partial_update",
        "description": "Use this method to update a camera properties.",
        "summary": "Update camera properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCameraRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "cameras_destroy",
        "description": "Use this method to delete a camera.",
        "summary": "Delete camera",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/cameras/{id}/goto-preset/": {
      "post": {
        "operationId": "cameras_goto_preset_create",
        "description": "Use this method to move ONVIF device to PTZ preset.",
        "summary": "Move ONVIF device to PTZ preset",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnvifPresetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/cameras/{id}/ptz/": {
      "post": {
        "operationId": "cameras_ptz_create",
        "description": "Use this method to move ONVIF device via pinch/tilt/zoom actions.",
        "summary": "Move ONVIF device via PTZ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnvifPTZMoveRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/cameras/{id}/ptz-presets/": {
      "post": {
        "operationId": "cameras_ptz_presets_create",
        "description": "Use this method to list ONVIF device PTZ presets for media profile.",
        "summary": "List ONVIF device PTZ presets for media profile",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnvifGetPresetsRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifGetPresetsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/{id}/remove-preset/": {
      "post": {
        "operationId": "cameras_remove_preset_create",
        "description": "Use this method to remove ONVIF device PTZ preset.",
        "summary": "Remove ONVIF device PTZ preset",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnvifPresetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/cameras/{id}/restart/": {
      "post": {
        "operationId": "cameras_restart_create",
        "summary": "Restart camera processing",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/{id}/screenshot/": {
      "get": {
        "operationId": "cameras_screenshot_retrieve",
        "description": "Use this method to retrieve a screenshot from a camera video stream (can be cached).",
        "summary": "Retrieve a screenshot from camera stream (can be cached)",
        "parameters": [
          {
            "in": "query",
            "name": "height",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot height"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "quality",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot quality (the value can be ignored if the stream is not processed by the findface-video-worker)"
          },
          {
            "in": "query",
            "name": "rot",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Either request screenshot with ROT or without"
          },
          {
            "in": "query",
            "name": "width",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot width"
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "cameras_screenshot_create",
        "description": "This method retrieves a screenshot from a camera video stream (cache invalidated).",
        "summary": "Retrieve a screenshot of the camera stream (invalidates cache)",
        "parameters": [
          {
            "in": "query",
            "name": "height",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot height"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "quality",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot quality (the value can be ignored if the stream is not processed by the findface-video-worker)"
          },
          {
            "in": "query",
            "name": "rot",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Either request screenshot with ROT or without"
          },
          {
            "in": "query",
            "name": "width",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot width"
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/{id}/set-preset/": {
      "post": {
        "operationId": "cameras_set_preset_create",
        "description": "Use this method to create ONVIF device PTZ preset based on current position.",
        "summary": "Create ONVIF device PTZ preset based on current position",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera.",
            "required": true
          }
        ],
        "tags": [
          "cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnvifSetPresetRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifSetPresetResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/count/": {
      "get": {
        "operationId": "cameras_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active cameras (`true`) or inactive cameras (`false`)"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cameras included in these camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "external_detector",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only external detectors (`true`) or cameras (`false`)"
          },
          {
            "in": "query",
            "name": "external_vms",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cameras included in these `external_vms`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "external_vms_camera_id_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select camera exact with this `external_vms_camera_id`"
          },
          {
            "in": "query",
            "name": "from_external_vms",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select all cameras from external_vms. `false` - select all cameras not from external_vms."
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cameras with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select cameras where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "in": "query",
            "name": "object_type",
            "schema": {
              "type": "string"
            },
            "description": "Select cameras that support a given type of object: face, body or car"
          },
          {
            "in": "query",
            "name": "state_color",
            "schema": {
              "type": "string"
            },
            "description": "Select cameras by status (`gray`, `red`, `yellow` or `green`)"
          }
        ],
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cameras/default_parameters/": {
      "get": {
        "operationId": "cameras_default_parameters_retrieve",
        "description": "This method retrieves default values of the `stream_settings` parameters.",
        "summary": "Retrieve default values of `stream_settings` parameters",
        "tags": [
          "cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineStreamSettings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cards/humans/": {
      "get": {
        "operationId": "cards_humans_list",
        "description": "Use this method to list human cards.",
        "summary": "List human cards",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active (`true`) or disabled (`false`) cards"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "filled",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only filled (`true`) or infilled (`false`) cards"
          },
          {
            "in": "query",
            "name": "has_body_objects",
            "schema": {
              "type": "string"
            },
            "description": "Select only cards with linked body objects (`true`) or without them (`false`)"
          },
          {
            "in": "query",
            "name": "has_face_objects",
            "schema": {
              "type": "string"
            },
            "description": "Select only cards with linked face objects (`true`) or without them (`false`)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cards with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "looks_like",
            "schema": {
              "type": "string"
            },
            "description": "Select cards that contain object similar to: (`detection:<detection id>`, `{face, body, or car}event:<event id>` `{face, body, or car}object:<object id>`, `{face, body or car}cluster:<cluster id>` or `caseparticipant:<caseparticipant id>`)"
          },
          {
            "in": "query",
            "name": "modified_date_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "modified_date_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "modified_date_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "modified_date_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "modified_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects that were modified in last N days"
          },
          {
            "in": "query",
            "name": "modified_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects that were modified in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "modified_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects that were modified in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select cards where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created_date`, `id`, `looks_like_confidence`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cards included in these relations",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "threshold",
            "schema": {
              "type": "number"
            },
            "description": "Similarity threshold for `looks_like`"
          },
          {
            "in": "query",
            "name": "watch_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cards included in these watch lists",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "cards"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHumanCardList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "cards_humans_create",
        "description": "Use this method to add a new human card.",
        "summary": "Add new human card",
        "tags": [
          "cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanCardRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCard"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cards/humans/{id}/": {
      "get": {
        "operationId": "cards_humans_retrieve",
        "description": "Use this method to retrieve a human card by its ID.",
        "summary": "Retrieve human card by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card.",
            "required": true
          }
        ],
        "tags": [
          "cards"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCard"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "cards_humans_partial_update",
        "description": "Use this method to update a human card properties.",
        "summary": "Update human card properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card.",
            "required": true
          }
        ],
        "tags": [
          "cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedHumanCardRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCard"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "cards_humans_destroy",
        "description": "Use this method to delete a human card.",
        "summary": "Delete human card",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card.",
            "required": true
          }
        ],
        "tags": [
          "cards"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/cards/humans/count/": {
      "get": {
        "operationId": "cards_humans_count_retrieve",
        "description": "This method retrieves a count of human cards.",
        "summary": "Human cards count",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active (`true`) or disabled (`false`) cards"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "filled",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only filled (`true`) or infilled (`false`) cards"
          },
          {
            "in": "query",
            "name": "has_body_objects",
            "schema": {
              "type": "string"
            },
            "description": "Select only cards with linked body objects (`true`) or without them (`false`)"
          },
          {
            "in": "query",
            "name": "has_face_objects",
            "schema": {
              "type": "string"
            },
            "description": "Select only cards with linked face objects (`true`) or without them (`false`)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cards with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "modified_date_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "modified_date_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "modified_date_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "modified_date_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `modified_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "modified_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects that were modified in last N days"
          },
          {
            "in": "query",
            "name": "modified_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects that were modified in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "modified_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects that were modified in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select cards where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cards included in these relations",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "watch_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cards included in these watch lists",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "cards"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cluster-events/faces/": {
      "get": {
        "operationId": "cluster_events_faces_list",
        "description": "Use this method to list face cluster events.",
        "summary": "List cluster events",
        "parameters": [
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select objects where feature `age` is greater than or equal than this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select objects where feature `age` is lower than or equal than this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select objects where feature `beard` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to this `camera group`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to this `camera`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select cluster events related to these `cases`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cluster_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects where the `cluster` id takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select objects where feature `emotions` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "episodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to this `episode`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select objects where feature `gender` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select objects where feature `glasses` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only cluster events relates to case. `false` - select only cluster events without case."
          },
          {
            "in": "query",
            "name": "has_matches",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only cluster events with matches. `false` - select only cluster events without matches."
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cluster events with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select objects where feature `liveness` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select objects where feature `look` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "matched_card",
            "schema": {
              "type": "integer"
            },
            "description": "Select objects that match this card"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects that match a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select objects where feature `medmask` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "cluster-events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFaceClusterEventList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/cluster-events/faces/{id}/": {
      "get": {
        "operationId": "cluster_events_faces_retrieve",
        "description": "Use this method to retrieve face cluster event by ID",
        "summary": "Retrieve face cluster event by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster event.",
            "required": true
          }
        ],
        "tags": [
          "cluster-events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceClusterEvent"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "cluster_events_faces_update",
        "description": "Use this method to update face cluster event properties",
        "summary": "Update face cluster event properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster event.",
            "required": true
          }
        ],
        "tags": [
          "cluster-events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceClusterEventRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceClusterEvent"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "cluster_events_faces_partial_update",
        "description": "Use this method to update face cluster event properties",
        "summary": "Update face cluster event properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster event.",
            "required": true
          }
        ],
        "tags": [
          "cluster-events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFaceClusterEventRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceClusterEvent"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "cluster_events_faces_destroy",
        "description": "Use this method to delete face cluster event",
        "summary": "Delete face cluster event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster event.",
            "required": true
          }
        ],
        "tags": [
          "cluster-events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/cluster-events/faces/count/": {
      "get": {
        "operationId": "cluster_events_faces_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select objects where feature `age` is greater than or equal than this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select objects where feature `age` is lower than or equal than this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select objects where feature `beard` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to this `camera group`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to this `camera`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select cluster events related to these `cases`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cluster_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects where the `cluster` id takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select objects where feature `emotions` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "episodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to this `episode`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select objects where feature `gender` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select objects where feature `glasses` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only cluster events relates to case. `false` - select only cluster events without case."
          },
          {
            "in": "query",
            "name": "has_matches",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only cluster events with matches. `false` - select only cluster events without matches."
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select cluster events with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select objects where feature `liveness` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select objects where feature `look` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "matched_card",
            "schema": {
              "type": "integer"
            },
            "description": "Select objects that match this card"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects that match a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select objects where feature `medmask` takes one of these values",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "cluster-events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusterization-jobs/": {
      "get": {
        "operationId": "clusterization_jobs_list",
        "summary": "List clusterization jobs",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "clusterization-jobs"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedClusterizationJobList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusterization-jobs/{id}/": {
      "get": {
        "operationId": "clusterization_jobs_retrieve",
        "summary": "Retrieve clusterization job by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Clusterization job.",
            "required": true
          }
        ],
        "tags": [
          "clusterization-jobs"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterizationJob"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusters/faces/": {
      "get": {
        "operationId": "clusters_faces_list",
        "summary": "List face clusters",
        "parameters": [
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **greater than or equal** than this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **lower than or equal** than this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `beard` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified cameras",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters that matched card"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select clusters related to these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select clusters where `emotions` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "episodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to `episode` Pass comma separated values to select related to multiple `episode`s)",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select clusters gender `gender` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select clusters where `glasses` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_card",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with a card. `false` - select only clusters without a card."
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters relates to case. `false` - select only clusters without case."
          },
          {
            "in": "query",
            "name": "has_caseparticipants",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with related caseparticipant. `false` - select only clusters without related caseparticipant."
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select clusters where `liveness` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true
              }
            },
            "description": "Select clusters where `look` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "looks_like",
            "schema": {
              "type": "string"
            },
            "description": "Select clusters that contain object similar to: (`detection:<detection id>`, `{face, body or car}event:<event id>`, `{face, body or car}object:<object id>`, `{face, body or car}cluster:<cluster id>` or `caseparticipant:<caseparticipant id>`)"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters that matched a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `medmask` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `looks_like_confidence`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pinned",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only pinned clusters"
          },
          {
            "in": "query",
            "name": "threshold",
            "schema": {
              "type": "number"
            },
            "description": "Similarity threshold for `looks_like`"
          },
          {
            "in": "query",
            "name": "tnt_id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 9223372036854775807,
                "minimum": -9223372036854775808,
                "format": "int64",
                "nullable": true
              }
            },
            "description": "Select clusters with provided tnt ids",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFaceClusterList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusters/faces/{id}/": {
      "get": {
        "operationId": "clusters_faces_retrieve",
        "summary": "Retrieve face cluster by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster.",
            "required": true
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceCluster"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "clusters_faces_partial_update",
        "summary": "Update face cluster properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster.",
            "required": true
          }
        ],
        "tags": [
          "clusters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFaceClusterRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceCluster"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "clusters_faces_destroy",
        "summary": "Delete face cluster",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster.",
            "required": true
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/clusters/faces/{id}/contacts/": {
      "get": {
        "operationId": "clusters_faces_contacts_list",
        "description": "This method searches for face clusters with whom the selected face cluster has been in contact. All filters from cluster listing are supported.",
        "summary": "Search for face cluster contacts",
        "parameters": [
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **greater than or equal** than this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **lower than or equal** than this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `beard` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified cameras",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters that matched card"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select clusters related to these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "contact_threshold_seconds",
            "schema": {
              "type": "integer",
              "maximum": 3600,
              "minimum": 1
            },
            "description": "Parameter that determines how many seconds have passed in both directions since contact.",
            "required": true
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select clusters where `emotions` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "episodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to `episode` Pass comma separated values to select related to multiple `episode`s)",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select clusters gender `gender` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select clusters where `glasses` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_card",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with a card. `false` - select only clusters without a card."
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters relates to case. `false` - select only clusters without case."
          },
          {
            "in": "query",
            "name": "has_caseparticipants",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with related caseparticipant. `false` - select only clusters without related caseparticipant."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster.",
            "required": true
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select clusters where `liveness` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true
              }
            },
            "description": "Select clusters where `look` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "looks_like",
            "schema": {
              "type": "string"
            },
            "description": "Select clusters that contain object similar to: (`detection:<detection id>`, `{face, body or car}event:<event id>`, `{face, body or car}object:<object id>`, `{face, body or car}cluster:<cluster id>` or `caseparticipant:<caseparticipant id>`)"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters that matched a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `medmask` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `looks_like_confidence`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pinned",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only pinned clusters"
          },
          {
            "in": "query",
            "name": "threshold",
            "schema": {
              "type": "number"
            },
            "description": "Similarity threshold for `looks_like`"
          },
          {
            "in": "query",
            "name": "tnt_id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 9223372036854775807,
                "minimum": -9223372036854775808,
                "format": "int64",
                "nullable": true
              }
            },
            "description": "Select clusters with provided tnt ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "use_last_event",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Use the last event for search"
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFaceClusterList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusters/faces/{id}/contacts_tracks/": {
      "get": {
        "operationId": "clusters_faces_contacts_tracks_list",
        "description": "This method searches for face clusters with whom the selected face cluster has been in contact. All filters from cluster listing are supported.",
        "summary": "Search for face cluster contacts using tracks (experimental feature)",
        "parameters": [
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **greater than or equal** than this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **lower than or equal** than this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `beard` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified cameras",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters that matched card"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select clusters related to these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select clusters where `emotions` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "episodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to `episode` Pass comma separated values to select related to multiple `episode`s)",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select clusters gender `gender` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select clusters where `glasses` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_card",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with a card. `false` - select only clusters without a card."
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters relates to case. `false` - select only clusters without case."
          },
          {
            "in": "query",
            "name": "has_caseparticipants",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with related caseparticipant. `false` - select only clusters without related caseparticipant."
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster.",
            "required": true
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "intersection_threshold",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Parameter that determines track intersection threshold in seconds."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select clusters where `liveness` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true
              }
            },
            "description": "Select clusters where `look` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "looks_like",
            "schema": {
              "type": "string"
            },
            "description": "Select clusters that contain object similar to: (`detection:<detection id>`, `{face, body or car}event:<event id>`, `{face, body or car}object:<object id>`, `{face, body or car}cluster:<cluster id>` or `caseparticipant:<caseparticipant id>`)"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters that matched a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `medmask` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `looks_like_confidence`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pinned",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only pinned clusters"
          },
          {
            "in": "query",
            "name": "threshold",
            "schema": {
              "type": "number"
            },
            "description": "Similarity threshold for `looks_like`"
          },
          {
            "in": "query",
            "name": "tnt_id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 9223372036854775807,
                "minimum": -9223372036854775808,
                "format": "int64",
                "nullable": true
              }
            },
            "description": "Select clusters with provided tnt ids",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFaceClusterList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusters/faces/{id}/merge/": {
      "post": {
        "operationId": "clusters_faces_merge_create",
        "description": "This method allows you to merge multiple face clusters.Source clusters besides selected will be deleted.",
        "summary": "Merge multiple face clusters into selected",
        "parameters": [
          {
            "in": "query",
            "name": "clusters",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Clusters to merge",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Face cluster.",
            "required": true
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceCluster"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/clusters/faces/count/": {
      "get": {
        "operationId": "clusters_faces_count_retrieve",
        "description": "This method retrieves a count of face clusters.",
        "summary": "Face cluster count",
        "parameters": [
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **greater than or equal** than this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where feature `age` is **lower than or equal** than this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `beard` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters associated with the specified cameras",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters that matched card"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select clusters related to these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select clusters where `emotions` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "episodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select objects related to `episode` Pass comma separated values to select related to multiple `episode`s)",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `any` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select clusters where cluster events count is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "events_quality_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select clusters where average cluster event quality is **less or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less** than this value"
          },
          {
            "in": "query",
            "name": "first_event_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `first` event date **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select clusters gender `gender` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select clusters where `glasses` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_card",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with a card. `false` - select only clusters without a card."
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters relates to case. `false` - select only clusters without case."
          },
          {
            "in": "query",
            "name": "has_caseparticipants",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only clusters with related caseparticipant. `false` - select only clusters without related caseparticipant."
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select clusters where `liveness` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true
              }
            },
            "description": "Select clusters where `look` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select clusters that matched a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select clusters where `medmask` feature takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "pinned",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only pinned clusters"
          },
          {
            "in": "query",
            "name": "tnt_id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 9223372036854775807,
                "minimum": -9223372036854775808,
                "format": "int64",
                "nullable": true
              }
            },
            "description": "Select clusters with provided tnt ids",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "clusters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/config.json": {
      "get": {
        "operationId": "config.json_retrieve",
        "description": "This method retrieves the web UI configuration.",
        "summary": "Retrieve Web UI configuration",
        "tags": [
          "config.json"
        ],
        "security": [
          {
            "Bearer": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "str┃int┃float┃bool┃object┃array┃null"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/counter-records/": {
      "get": {
        "operationId": "counter_records_list",
        "summary": "List counter records",
        "parameters": [
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counter records related to `camera_group`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counter records related to `camera`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cars_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `cars_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "cars_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `cars_count` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "counter",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counter records related to one or multiple `counter`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "faces_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `faces_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "faces_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `faces_count` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counters records with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created_date`, `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "proximity_avg_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_avg` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_avg_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_avg` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_max_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_max` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_max_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_max` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_min_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_min` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_min_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_min` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "silhouettes_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `silhouettes_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "silhouettes_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `silhouettes_count` **less than or equal** to this value"
          }
        ],
        "tags": [
          "counter-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCounterRecordList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/counter-records/{id}/": {
      "get": {
        "operationId": "counter_records_retrieve",
        "summary": "Retrieve a counter record by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Counter record.",
            "required": true
          }
        ],
        "tags": [
          "counter-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterRecord"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/counter-records/count/": {
      "get": {
        "operationId": "counter_records_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counter records related to `camera_group`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counter records related to `camera`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cars_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `cars_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "cars_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `cars_count` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "counter",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counter records related to one or multiple `counter`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "faces_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `faces_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "faces_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `faces_count` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counters records with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "proximity_avg_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_avg` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_avg_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_avg` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_max_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_max` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_max_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_max` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_min_gte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_min` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "proximity_min_lte",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Select counter records with `proximity_min` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "silhouettes_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `silhouettes_count` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "silhouettes_count_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counter records with `silhouettes_count` **less than or equal** to this value"
          }
        ],
        "tags": [
          "counter-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/counters/": {
      "get": {
        "operationId": "counters_list",
        "description": "This method retrieves the list of counters.",
        "summary": "List counters",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active counters (`true`) or inactive (`false`) counters"
          },
          {
            "in": "query",
            "name": "calibration_status",
            "schema": {
              "type": "string",
              "enum": [
                "AWAITING_PROXIMITY_MODEL",
                "AWAITING_SYNC",
                "CALIBRATED",
                "COLLECTING_CALIBRATION_DATA",
                "NOT_CALIBRATED"
              ]
            },
            "description": "Select counters with this `proximity_calibration_status`"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get counters that are associated with cameras from `camera_group`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get counters that are associated with `camera`. Pass comma separated values to select counters related to multiple `camera`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "count_interval_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counters with `count_interval` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "count_interval_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counters with `count_interval` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "detect_cars",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters that count cars"
          },
          {
            "in": "query",
            "name": "detect_faces",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters that count faces"
          },
          {
            "in": "query",
            "name": "detect_proximity",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only counters with (`true`) or without (`false`) proximity detection"
          },
          {
            "in": "query",
            "name": "detect_silhouettes",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters that count silhouettes"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counters with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "multi_camera",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters related to multiple cameras"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select counters where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created_date`, `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "counters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCounterList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "counters_create",
        "description": "This method adds a new counter.",
        "summary": "Add new counter",
        "tags": [
          "counters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterRequest"
              },
              "examples": {
                "CounterInputExample": {
                  "value": {
                    "active": true,
                    "name": "string",
                    "detect_faces": true,
                    "detect_silhouettes": true,
                    "detect_cars": true,
                    "count_interval": 5,
                    "roi": {
                      "1": [
                        [
                          833,
                          372
                        ],
                        [
                          600,
                          446
                        ],
                        [
                          526,
                          636
                        ],
                        [
                          622,
                          746
                        ],
                        [
                          922,
                          864
                        ]
                      ],
                      "2": [
                        [
                          506,
                          252
                        ],
                        [
                          415,
                          595
                        ],
                        [
                          773,
                          766
                        ],
                        [
                          1159,
                          713
                        ],
                        [
                          1222,
                          348
                        ]
                      ]
                    },
                    "cameras": [
                      1,
                      2
                    ]
                  },
                  "summary": "Counter Input Example"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/counters/{id}/": {
      "get": {
        "operationId": "counters_retrieve",
        "description": "This method retrieves a counter by its ID.",
        "summary": "Retrieve counter by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Counter.",
            "required": true
          }
        ],
        "tags": [
          "counters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "counters_partial_update",
        "description": "Use this method to update a counter properties.",
        "summary": "Update counter properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Counter.",
            "required": true
          }
        ],
        "tags": [
          "counters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCounterRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "counters_destroy",
        "description": "Use this method to delete a counter.",
        "summary": "Delete counter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Counter.",
            "required": true
          }
        ],
        "tags": [
          "counters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/counters/{id}/proximity_calibration/": {
      "post": {
        "operationId": "counters_proximity_calibration_create",
        "summary": "Start or restart counter proximity calibration",
        "parameters": [
          {
            "in": "query",
            "name": "collect_track_data_seconds",
            "schema": {
              "type": "integer",
              "maximum": 300,
              "minimum": 15
            },
            "description": "Collect calibration track data for this time (in seconds).",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Counter.",
            "required": true
          },
          {
            "in": "query",
            "name": "keep_old_track_data",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Do not delete existing track data on recalibration"
          }
        ],
        "tags": [
          "counters"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "delete": {
        "operationId": "counters_proximity_calibration_destroy",
        "summary": "Delete counter's proximity calibration data",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Counter.",
            "required": true
          }
        ],
        "tags": [
          "counters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/counters/count/": {
      "get": {
        "operationId": "counters_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active counters (`true`) or inactive (`false`) counters"
          },
          {
            "in": "query",
            "name": "calibration_status",
            "schema": {
              "type": "string",
              "enum": [
                "AWAITING_PROXIMITY_MODEL",
                "AWAITING_SYNC",
                "CALIBRATED",
                "COLLECTING_CALIBRATION_DATA",
                "NOT_CALIBRATED"
              ]
            },
            "description": "Select counters with this `proximity_calibration_status`"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get counters that are associated with cameras from `camera_group`.",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get counters that are associated with `camera`. Pass comma separated values to select counters related to multiple `camera`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "count_interval_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counters with `count_interval` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "count_interval_lte",
            "schema": {
              "type": "integer"
            },
            "description": "Select counters with `count_interval` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "detect_cars",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters that count cars"
          },
          {
            "in": "query",
            "name": "detect_faces",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters that count faces"
          },
          {
            "in": "query",
            "name": "detect_proximity",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only counters with (`true`) or without (`false`) proximity detection"
          },
          {
            "in": "query",
            "name": "detect_silhouettes",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters that count silhouettes"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select counters with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "multi_camera",
            "schema": {
              "type": "boolean"
            },
            "description": "Select counters related to multiple cameras"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select counters where the SQL condition `name ILIKE name_contains` is true"
          }
        ],
        "tags": [
          "counters"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/detect": {
      "post": {
        "operationId": "detect_create",
        "description": "Use this method to detect objects on a photo",
        "summary": "Detect objects on a photo",
        "tags": [
          "detect"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DetectRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/device-blacklist-records/": {
      "get": {
        "operationId": "device_blacklist_records_list",
        "description": "Use this method to list device blacklist records.",
        "summary": "List device blacklist records",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "expire_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select device blacklist records with `expire_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "expire_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select device blacklist records with `expire_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select device blacklist records with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created_date`, `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "reason_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select device blacklist records where the SQL condition `reason ILIKE reason_contains` is true"
          },
          {
            "in": "query",
            "name": "uuid_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select device blacklist records where the SQL condition `uuid ILIKE uuid_contains` is true"
          },
          {
            "in": "query",
            "name": "uuid_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select device blacklist records related to one or multiple `uuid`s",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "device-blacklist-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDeviceBlacklistRecordList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "device_blacklist_records_create",
        "description": "Use this method to add a device blacklist record.",
        "summary": "Add new device blacklist record",
        "tags": [
          "device-blacklist-records"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceBlacklistRecordRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceBlacklistRecord"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/device-blacklist-records/{id}/": {
      "get": {
        "operationId": "device_blacklist_records_retrieve",
        "description": "Use this method to retrieve a device blacklist record.",
        "summary": "Retrieve device blacklist record by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Device blacklist record.",
            "required": true
          }
        ],
        "tags": [
          "device-blacklist-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceBlacklistRecord"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "device_blacklist_records_partial_update",
        "description": "Use this method to update a device blacklist record properties.",
        "summary": "Update device blacklist record properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Device blacklist record.",
            "required": true
          }
        ],
        "tags": [
          "device-blacklist-records"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateDeviceBlacklistRecordRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDeviceBlacklistRecord"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "device_blacklist_records_destroy",
        "description": "Use this method to delete a device blacklist record.",
        "summary": "Delete device blacklist record",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Device blacklist record.",
            "required": true
          }
        ],
        "tags": [
          "device-blacklist-records"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/episodes/humans/": {
      "get": {
        "operationId": "episodes_humans_list",
        "description": "Use this method to list human episodes.",
        "summary": "List human episodes",
        "parameters": [
          {
            "in": "query",
            "name": "acknowledged",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only acknowledged episodes (`true`) or unacknowledged (`false`) episodes"
          },
          {
            "in": "query",
            "name": "acknowledged_by",
            "schema": {
              "type": "integer"
            },
            "description": "Select episodes acknowledged by user"
          },
          {
            "in": "query",
            "name": "acknowledged_reaction",
            "schema": {
              "type": "string"
            },
            "description": "Select only episodes with this acknowledgment reaction"
          },
          {
            "in": "query",
            "name": "age_group",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "0-16",
                  "17-35",
                  "36-50",
                  "50+"
                ]
              }
            },
            "description": "Select episodes where feature `age_group` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature`age` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `age` is **lower than or equal** to this value"
          },
          {
            "in": "query",
            "name": "bag_back",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "back",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `bag_back` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bag_ground",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ground",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `bag_ground` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bag_hand",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "hand",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `bag_hand` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `beard` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "body_gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select episodes where feature `gender` takes one of these values(body feature)",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bottom_color",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beige",
                  "black",
                  "blue",
                  "brown",
                  "green",
                  "grey",
                  "lightblue",
                  "orange",
                  "pink",
                  "purple",
                  "red",
                  "violet",
                  "white",
                  "yellow"
                ]
              }
            },
            "description": "Select episodes where feature `bottom_color` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified cameras",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select episodes related to these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "closed_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select episodes with `closed_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "detailed_upper_clothes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "coat",
                  "dress",
                  "jacket",
                  "shirt",
                  "sleeveless",
                  "sweatshirt",
                  "t-shirt"
                ]
              }
            },
            "description": "Select episodes where feature `detailed_upper_clothes` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select episodes where feature `emotions` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "events_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select episodes with number of events is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select episodes where feature `gender` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select episodes where feature `glasses` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_body",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes with body (`true`) or without body (`false`)"
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only episodes relates to case. `false` - select only episodes without case."
          },
          {
            "in": "query",
            "name": "has_face",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes with face (`true`) or without face (`false`)"
          },
          {
            "in": "query",
            "name": "headwear",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "hat",
                  "hood",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `headwear` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "helmet_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "none",
                  "not_visible",
                  "other",
                  "red/orange",
                  "white"
                ]
              }
            },
            "description": "Select episodes where feature `helmet_type` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "helmet_type_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `helmet_type_score` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "helmet_type_score_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `helmet_type_score` is **lower than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_body_event",
            "schema": {
              "type": "string"
            },
            "description": "Select only the episode with the last body event of the given id"
          },
          {
            "in": "query",
            "name": "last_body_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select episodes with `last_body_event_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "last_face_event",
            "schema": {
              "type": "string"
            },
            "description": "Select only the episode with the last face event of the given id"
          },
          {
            "in": "query",
            "name": "last_face_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select episodes with `last_face_event_date` **greater than or equal** to this value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select episodes where feature `liveness` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select episodes where feature `look` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "lower_clothes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "obscured",
                  "pants",
                  "shorts",
                  "skirt"
                ]
              }
            },
            "description": "Select episodes where feature `lower_clothes` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "matched_card",
            "schema": {
              "type": "integer"
            },
            "description": "Select episodes that match this card"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `medmask` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "no_body_match",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes without matched body (`true`) or with matched body (`false`)"
          },
          {
            "in": "query",
            "name": "no_face_match",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes without matched face (`true`) or with matched face (`false`)"
          },
          {
            "in": "query",
            "name": "open",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only open episodes (`true`) or closed (`false`) episodes"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created_date`, `id`, `uniform`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "top_color",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beige",
                  "black",
                  "blue",
                  "brown",
                  "green",
                  "grey",
                  "lightblue",
                  "orange",
                  "pink",
                  "purple",
                  "red",
                  "violet",
                  "white",
                  "yellow"
                ]
              }
            },
            "description": "Select episodes where feature `top_color` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "upper_clothes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "long_sleeves",
                  "short_sleeves",
                  "without_sleeves"
                ]
              }
            },
            "description": "Select episodes where feature `upper_clothes` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "vest_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "green/yellow",
                  "none",
                  "not_visible",
                  "orange"
                ]
              }
            },
            "description": "Select episodes where feature `vest_type` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "vest_type_score_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `vest_type_score` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "vest_type_score_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `vest_type_score` is **lower than or equal** to this value"
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified video archives",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "episodes"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHumanEpisodeList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/episodes/humans/{id}/": {
      "get": {
        "operationId": "episodes_humans_retrieve",
        "description": "Use this method to retrieve human episode by its ID.",
        "summary": "Retrieve human episode by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human episode.",
            "required": true
          }
        ],
        "tags": [
          "episodes"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanEpisode"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "episodes_humans_partial_update",
        "description": "Use this method to update human episode properties.",
        "summary": "Update human episode properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human episode.",
            "required": true
          }
        ],
        "tags": [
          "episodes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedHumanEpisodeRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanEpisode"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/episodes/humans/count/": {
      "get": {
        "operationId": "episodes_humans_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "acknowledged",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only acknowledged episodes (`true`) or unacknowledged (`false`) episodes"
          },
          {
            "in": "query",
            "name": "acknowledged_by",
            "schema": {
              "type": "integer"
            },
            "description": "Select episodes acknowledged by user"
          },
          {
            "in": "query",
            "name": "acknowledged_reaction",
            "schema": {
              "type": "string"
            },
            "description": "Select only episodes with this acknowledgment reaction"
          },
          {
            "in": "query",
            "name": "age_group",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "0-16",
                  "17-35",
                  "36-50",
                  "50+"
                ]
              }
            },
            "description": "Select episodes where feature `age_group` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature`age` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `age` is **lower than or equal** to this value"
          },
          {
            "in": "query",
            "name": "bag_back",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "back",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `bag_back` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bag_ground",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ground",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `bag_ground` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bag_hand",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "hand",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `bag_hand` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `beard` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "body_gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select episodes where feature `gender` takes one of these values(body feature)",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bottom_color",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beige",
                  "black",
                  "blue",
                  "brown",
                  "green",
                  "grey",
                  "lightblue",
                  "orange",
                  "pink",
                  "purple",
                  "red",
                  "violet",
                  "white",
                  "yellow"
                ]
              }
            },
            "description": "Select episodes where feature `bottom_color` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified cameras",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select episodes related to these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "closed_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select episodes with `closed_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "detailed_upper_clothes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "coat",
                  "dress",
                  "jacket",
                  "shirt",
                  "sleeveless",
                  "sweatshirt",
                  "t-shirt"
                ]
              }
            },
            "description": "Select episodes where feature `detailed_upper_clothes` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select episodes where feature `emotions` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "events_count_gte",
            "schema": {
              "type": "integer"
            },
            "description": "Select episodes with number of events is **greater or equal than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select episodes where feature `gender` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select episodes where feature `glasses` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_body",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes with body (`true`) or without body (`false`)"
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only episodes relates to case. `false` - select only episodes without case."
          },
          {
            "in": "query",
            "name": "has_face",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes with face (`true`) or without face (`false`)"
          },
          {
            "in": "query",
            "name": "headwear",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "hat",
                  "hood",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `headwear` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "helmet_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "none",
                  "not_visible",
                  "other",
                  "red/orange",
                  "white"
                ]
              }
            },
            "description": "Select episodes where feature `helmet_type` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "helmet_type_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `helmet_type_score` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "helmet_type_score_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `helmet_type_score` is **lower than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_body_event",
            "schema": {
              "type": "string"
            },
            "description": "Select only the episode with the last body event of the given id"
          },
          {
            "in": "query",
            "name": "last_body_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select episodes with `last_body_event_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "last_face_event",
            "schema": {
              "type": "string"
            },
            "description": "Select only the episode with the last face event of the given id"
          },
          {
            "in": "query",
            "name": "last_face_event_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select episodes with `last_face_event_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select episodes where feature `liveness` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select episodes where feature `look` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "lower_clothes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "obscured",
                  "pants",
                  "shorts",
                  "skirt"
                ]
              }
            },
            "description": "Select episodes where feature `lower_clothes` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "matched_card",
            "schema": {
              "type": "integer"
            },
            "description": "Select episodes that match this card"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select episodes where feature `medmask` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "no_body_match",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes without matched body (`true`) or with matched body (`false`)"
          },
          {
            "in": "query",
            "name": "no_face_match",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only episodes without matched face (`true`) or with matched face (`false`)"
          },
          {
            "in": "query",
            "name": "open",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only open episodes (`true`) or closed (`false`) episodes"
          },
          {
            "in": "query",
            "name": "top_color",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beige",
                  "black",
                  "blue",
                  "brown",
                  "green",
                  "grey",
                  "lightblue",
                  "orange",
                  "pink",
                  "purple",
                  "red",
                  "violet",
                  "white",
                  "yellow"
                ]
              }
            },
            "description": "Select episodes where feature `top_color` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "upper_clothes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "long_sleeves",
                  "short_sleeves",
                  "without_sleeves"
                ]
              }
            },
            "description": "Select episodes where feature `upper_clothes` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "vest_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "green/yellow",
                  "none",
                  "not_visible",
                  "orange"
                ]
              }
            },
            "description": "Select episodes where feature `vest_type` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "vest_type_score_gte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `vest_type_score` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "vest_type_score_lte",
            "schema": {
              "type": "string"
            },
            "description": "Select episodes where feature `vest_type_score` is **lower than or equal** to this value"
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select episodes associated with the specified video archives",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "episodes"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/events/faces/": {
      "get": {
        "operationId": "events_faces_list",
        "description": "Use this method to list face events.",
        "summary": "List face events",
        "parameters": [
          {
            "in": "query",
            "name": "acknowledged",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only acknowledged events (do not require acknowledgement), `false` - select only unacknowledged events"
          },
          {
            "in": "query",
            "name": "age_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.age` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "age_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.age` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "beard",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "beard",
                  "none"
                ]
              }
            },
            "description": "Select events where `features.beard.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "beard_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.beard.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "beard_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.beard.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "bs_type",
            "schema": {
              "type": "string",
              "enum": [
                "overall",
                "realtime"
              ]
            },
            "description": "Select objects where `bs_type` takes one of these values"
          },
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get events from these `camera groups`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get events from these `cameras`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select events related to these `cases`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with created in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with created in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with created in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "emotions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "angry",
                  "disgust",
                  "fear",
                  "happy",
                  "neutral",
                  "sad",
                  "surprise"
                ]
              }
            },
            "description": "Select events where `features.emotions.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "emotions_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.emotions.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "emotions_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.emotions.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "episode",
            "schema": {
              "type": "integer"
            },
            "description": "Select events that matched this episode"
          },
          {
            "in": "query",
            "name": "external_detector",
            "schema": {
              "type": "boolean"
            },
            "description": "Select events that created by external detectors"
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male"
                ]
              }
            },
            "description": "Select events where `features.gender.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "gender_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.gender.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "gender_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.gender.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "glasses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "eye",
                  "none",
                  "sun"
                ]
              }
            },
            "description": "Select events where `features.glasses.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "glasses_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.glasses.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "glasses_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.glasses.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "has_case",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only events relates to case. `false` - select only events without case."
          },
          {
            "in": "query",
            "name": "headpose_pitch_angle_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.headpose.pitch` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "headpose_pitch_angle_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.headpose.pitch` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "headpose_yaw_angle_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.headpose.yaw` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "headpose_yaw_angle_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.headpose.yaw` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "description": "Exact filter by ID"
          },
          {
            "in": "query",
            "name": "id_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `id` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select objects with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `id` **less than or equal** to this value"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "liveness",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fake",
                  "real"
                ]
              }
            },
            "description": "Select events where `features.liveness.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "liveness_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.liveness.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "liveness_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.liveness.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "look",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select events where `features.look.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "look_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.look.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "look_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.look.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "looks_like",
            "schema": {
              "type": "string"
            },
            "description": "Select events with faces similar to: (`detection:<detection id>`, `{face, body or car}object:<object id>`, `{face, body or car}event:<event id>`, `{face, body or car}cluster:<cluster id>` or `caseparticipant:<caseparticipant id>`). You can pass several search sources to search for. Pagination works if there is only one face to search for and if the sorting order is id. In all other cases, only the first page of results is returned"
          },
          {
            "in": "query",
            "name": "matched_card",
            "schema": {
              "type": "integer"
            },
            "description": "Select events that matched this card"
          },
          {
            "in": "query",
            "name": "matched_lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select events that match a card included in these watch lists",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "correct",
                  "incorrect",
                  "none"
                ]
              }
            },
            "description": "Select events where `features.medmask.name` takes one of these values",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "medmask_score_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.medmask.confidence` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "medmask_score_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `features.medmask.confidence` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "no_match",
            "schema": {
              "type": "boolean"
            },
            "description": "`true` - select only events without matches. `false` - select events only with matches."
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use for ordering. Available values: id, -id. Available values for looks_like: -confidence, -looks_like_confidence, id, -id, confidence and looks_like_confidence ordering are equivalents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "temperature_gte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `temperature` is **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "temperature_lte",
            "schema": {
              "type": "number"
            },
            "description": "Select events where `temperature` is **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "threshold",
            "schema": {
              "type": "number"
            },
            "description": "Similarity threshold for `looks_like`"
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get events from these video archives",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedExtendedFaceEventList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/events/faces/{id}/": {
      "get": {
        "operationId": "events_faces_retrieve",
        "description": "Use this method to retrieve face event.",
        "summary": "Retrieve face event by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedFaceEvent"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "events_faces_partial_update",
        "description": "Use this method to update face event properties.",
        "summary": "Update face event properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExtendedFaceEventRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedFaceEvent"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/events/faces/acknowledge/": {
      "post": {
        "operationId": "events_faces_acknowledge_create",
        "description": "Use this method to acknowledge all events of this object type accessible for the current user.",
        "summary": "Acknowledge all events of this type accessible for the current user",
        "tags": [
          "events"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/events/faces/add/": {
      "post": {
        "operationId": "events_faces_add_create",
        "description": "Use this method to create new face events.",
        "summary": "Create face events from provided image",
        "tags": [
          "events"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateFaceEventsRequestRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventsResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/groups/": {
      "get": {
        "operationId": "groups_list",
        "description": "This method retrieves the list of group objects.\n **Groups** are objects used to control access to the system entities, such as watch lists, camera groups, etc.",
        "summary": "List groups",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "groups_create",
        "description": "This method creates a groups object.\n **Groups** are objects used to control access to the system entities, such as watch lists, camera groups, etc.",
        "summary": "Add new group",
        "tags": [
          "groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/groups/{id}/": {
      "get": {
        "operationId": "groups_retrieve",
        "description": "This method retrieves group object by id.\n **Groups** are objects used to control access to the system entities, such as watch lists, camera groups, etc.",
        "summary": "Retrieve group by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "groups_update",
        "description": "This method replaces group object.\n **Groups** are objects used to control access to the system entities, such as watch lists, camera groups, etc.",
        "summary": "Replace group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "groups_partial_update",
        "description": "This method updates group object.\n **Groups** are objects used to control access to the system entities, such as watch lists, camera groups, etc.",
        "summary": "Update group properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "groups_destroy",
        "description": "This method deletes group object.\n **Groups** are objects used to control access to the system entities, such as watch lists, camera groups, etc.",
        "summary": "Delete group",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this group.",
            "required": true
          }
        ],
        "tags": [
          "groups"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/hooks/": {
      "get": {
        "operationId": "hooks_list",
        "description": "Use this method to list webhooks.",
        "summary": "List webhooks",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select webhooks with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `name`, `url`, `active`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "hooks"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedWebhookList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "hooks_create",
        "description": "Use this method to add a new webhook.",
        "summary": "Add a new webhook",
        "tags": [
          "hooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/hooks/{id}/": {
      "get": {
        "operationId": "hooks_retrieve",
        "description": "Use this method to retrieve a webhook by its ID.",
        "summary": "Retrieve webhook by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Webhook.",
            "required": true
          }
        ],
        "tags": [
          "hooks"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "hooks_partial_update",
        "description": "Use this method to update a webhook properties.",
        "summary": "Update webhook properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Webhook.",
            "required": true
          }
        ],
        "tags": [
          "hooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedWebhookRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "hooks_destroy",
        "description": "Use this method to delete a webhook.",
        "summary": "Delete webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Webhook.",
            "required": true
          }
        ],
        "tags": [
          "hooks"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/human-card-attachments/": {
      "get": {
        "operationId": "human_card_attachments_list",
        "parameters": [
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "integer"
            },
            "description": "Select attachments related to `human card`"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select attachments with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "human-card-attachments"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHumanCardAttachmentList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "human_card_attachments_create",
        "tags": [
          "human-card-attachments"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/HumanCardAttachmentRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCardAttachment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/human-card-attachments/{id}/": {
      "get": {
        "operationId": "human_card_attachments_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card attachment.",
            "required": true
          }
        ],
        "tags": [
          "human-card-attachments"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCardAttachment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "human_card_attachments_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card attachment.",
            "required": true
          }
        ],
        "tags": [
          "human-card-attachments"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/HumanCardAttachmentRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCardAttachment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "human_card_attachments_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card attachment.",
            "required": true
          }
        ],
        "tags": [
          "human-card-attachments"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedHumanCardAttachmentRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanCardAttachment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "human_card_attachments_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Human card attachment.",
            "required": true
          }
        ],
        "tags": [
          "human-card-attachments"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/lines/": {
      "get": {
        "operationId": "lines_list",
        "summary": "List lines",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active lines (`true`) or inactive (`false`) lines"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get lines for selected `cameras`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select lines with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select lines where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "video_archives",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get lines for selected `video_archives`",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "lines"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLineList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "lines_create",
        "summary": "Add new line",
        "tags": [
          "lines"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Line"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/lines/{id}/": {
      "get": {
        "operationId": "lines_retrieve",
        "summary": "Retrieve line by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Line.",
            "required": true
          }
        ],
        "tags": [
          "lines"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Line"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "lines_partial_update",
        "summary": "Update line properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Line.",
            "required": true
          }
        ],
        "tags": [
          "lines"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedLineRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Line"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "lines_destroy",
        "summary": "Delete line",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Line.",
            "required": true
          }
        ],
        "tags": [
          "lines"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/lines/count/": {
      "get": {
        "operationId": "lines_count_retrieve",
        "description": "This method retrieves a count of lines.",
        "summary": "Lines count",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active lines (`true`) or inactive (`false`) lines"
          },
          {
            "in": "query",
            "name": "cameras",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get lines for selected `cameras`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select lines with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select lines where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "in": "query",
            "name": "video_archives",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get lines for selected `video_archives`",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "lines"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/meta-dictionaries/": {
      "get": {
        "operationId": "meta_dictionaries_list",
        "description": "Use this method to list meta dictionaries.",
        "summary": "List meta dictionaries",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Select dictionaries with this `name`"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select dictionaries where SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created_date`, `id`, `modified_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "meta-dictionaries"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMetaDictionaryList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "meta_dictionaries_create",
        "description": "Use this method to add a new meta dictionary.",
        "summary": "Add a new meta dictionary",
        "tags": [
          "meta-dictionaries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaDictionaryRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaDictionary"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/meta-dictionaries/{id}/": {
      "get": {
        "operationId": "meta_dictionaries_retrieve",
        "description": "Use this method to retrieve a meta dictionary.",
        "summary": "Retrieve meta dictionary by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this Meta dictionary.",
            "required": true
          }
        ],
        "tags": [
          "meta-dictionaries"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaDictionary"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "meta_dictionaries_partial_update",
        "description": "Use this method to update a meta dictionary properties.",
        "summary": "Update meta dictionary properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this Meta dictionary.",
            "required": true
          }
        ],
        "tags": [
          "meta-dictionaries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUpdateMetaDictionaryRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaDictionary"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "meta_dictionaries_destroy",
        "description": "Use this method to delete a meta dictionary.",
        "summary": "Delete meta dictionary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this Meta dictionary.",
            "required": true
          }
        ],
        "tags": [
          "meta-dictionaries"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/meta-dictionary-values/": {
      "get": {
        "operationId": "meta_dictionary_values_list",
        "description": "Use this method to list a meta dictionary values.",
        "summary": "List meta dictionary values",
        "parameters": [
          {
            "in": "query",
            "name": "dictionary",
            "schema": {
              "type": "string"
            },
            "description": "Select values belonging to this `dictionary`"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string"
            },
            "description": "Select elements with `value`"
          },
          {
            "in": "query",
            "name": "value_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select elements where the SQL condition `value ILIKE value_contains` is true"
          }
        ],
        "tags": [
          "meta-dictionary-values"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMetaDictionaryValueList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "meta_dictionary_values_create",
        "description": "Use this method to add a new meta dictionary value.",
        "summary": "Add a new meta dictionary value",
        "tags": [
          "meta-dictionary-values"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaDictionaryValueRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaDictionaryValue"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/meta-dictionary-values/{id}/": {
      "get": {
        "operationId": "meta_dictionary_values_retrieve",
        "description": "Use this method to retrieve a meta dictionary value by its ID.",
        "summary": "Retrieve meta dictionary value by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Meta dictionary value.",
            "required": true
          }
        ],
        "tags": [
          "meta-dictionary-values"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaDictionaryValue"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "meta_dictionary_values_partial_update",
        "description": "Use this method to update a meta dictionary value.",
        "summary": "Update meta dictionary value",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Meta dictionary value.",
            "required": true
          }
        ],
        "tags": [
          "meta-dictionary-values"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedMetaDictionaryValueRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetaDictionaryValue"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "meta_dictionary_values_destroy",
        "description": "Use this method to delete a meta dictionary value.",
        "summary": "Delete meta dictionary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Meta dictionary value.",
            "required": true
          }
        ],
        "tags": [
          "meta-dictionary-values"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/notifications/": {
      "get": {
        "operationId": "notifications_list",
        "description": "Use this method to list notifications.",
        "summary": "List notifications",
        "parameters": [
          {
            "in": "query",
            "name": "acknowledged_by",
            "schema": {
              "type": "integer"
            },
            "description": "Select notifications acknowledged by user"
          },
          {
            "in": "query",
            "name": "acknowledged_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select notifications with `acknowledged_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "acknowledged_reaction",
            "schema": {
              "type": "string"
            },
            "description": "Select only notifications with this acknowledgement reaction"
          },
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active (`true`) or closed (`false`) notifications"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "event_id",
            "schema": {
              "type": "string"
            },
            "description": "Select notifications on the event with the specified id"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select notifications with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "subscribed_users",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select notifications delivered to the specified users",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedNotificationList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/notifications/{id}/": {
      "get": {
        "operationId": "notifications_retrieve",
        "description": "Use this method to retrieve a notification by its ID.",
        "summary": "Retrieve notification by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Notification.",
            "required": true
          }
        ],
        "tags": [
          "notifications"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/notifications/{id}/acknowledge/": {
      "post": {
        "operationId": "notifications_acknowledge_create",
        "summary": "Acknowledgement notification",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Notification.",
            "required": true
          }
        ],
        "tags": [
          "notifications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/objects/faces/": {
      "get": {
        "operationId": "objects_faces_list",
        "description": "This method lists face objects.\n **Face object** is an object that contains source photo, thumbnail, and other attributes",
        "summary": "List face objects",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active objects (`true`) or inactive (`false`)"
          },
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Get face objects from these `cards`",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select objects with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "objects"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFaceObjectUpdateList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "objects_faces_create",
        "description": "This method creates new face object.\n **Face object** is an object that contains source photo, thumbnail, and other attributes",
        "summary": "Add face object",
        "tags": [
          "objects"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FaceObjectRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceObjectUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/objects/faces/{id}/": {
      "get": {
        "operationId": "objects_faces_retrieve",
        "description": "This method retrieve face object by id.\n **Face object** is an object that contains source photo, thumbnail, and other attributes",
        "summary": "Retrieve face object by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "objects"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceObjectUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "objects_faces_partial_update",
        "description": "This method updates a face object properties.",
        "summary": "Update face object properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "objects"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFaceObjectUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceObjectUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "objects_faces_destroy",
        "description": "Use this method to delete a face object.",
        "summary": "Delete face object",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "objects"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/": {
      "get": {
        "operationId": "onvif_cameras_list",
        "summary": "List ONVIF cameras",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select onvif cameras with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOnvifCameraList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/onvif-cameras/{id}/": {
      "get": {
        "operationId": "onvif_cameras_retrieve",
        "summary": "Retrieve ONVIF camera by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifCamera"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "onvif_cameras_partial_update",
        "description": "Use this method to update ONVIF Camera properties.",
        "summary": "Update ONVIF Camera properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOnvifUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifCamera"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/onvif-cameras/{id}/auth/": {
      "post": {
        "operationId": "onvif_cameras_auth_create",
        "description": "Use this method to auth in ONVIF device.",
        "summary": "Auth in ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnvifAuthRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifCamera"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/onvif-cameras/{id}/compatible-video-encoder-configurations/": {
      "get": {
        "operationId": "onvif_cameras_compatible_video_encoder_configurations_retrieve",
        "description": "This operation lists all the video encoder configurations of ONVIF device that are compatible with a certain media profile.",
        "summary": "Get compatible video encoder configurations of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "profile_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF media profile token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/compatible-video-source-configurations/": {
      "get": {
        "operationId": "onvif_cameras_compatible_video_source_configurations_retrieve",
        "description": "This operation requests all the video source configurations of the ONVIF device that are compatible with a certain media profile.",
        "summary": "Get compatible video source configurations for profile of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "profile_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF media profile token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/imaging-settings/": {
      "get": {
        "operationId": "onvif_cameras_imaging_settings_retrieve",
        "description": "This operation requests the imaging setting for a video source on the device. A device implementing the imaging service shall support this command.",
        "summary": "Get image-settings of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "video_source_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF video source configuration token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "patch": {
        "operationId": "onvif_cameras_imaging_settings_partial_update",
        "description": "This operation sets the imaging settings for a video source on a device. A device implementing the imaging service shall support this command.",
        "summary": "Update image-settings of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOnvifSetImagingSettingsRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/imaging-settings-options/": {
      "get": {
        "operationId": "onvif_cameras_imaging_settings_options_retrieve",
        "summary": "Get image-settings options of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "video_source_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF video source configuration token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/reboot/": {
      "post": {
        "operationId": "onvif_cameras_reboot_create",
        "description": "Use this method to reboot ONVIF device.",
        "summary": "Reboot ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/refresh/": {
      "post": {
        "operationId": "onvif_cameras_refresh_create",
        "description": "Use this method to refresh info of ONVIF device.",
        "summary": "Refresh ONVIF device info",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifCamera"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/onvif-cameras/{id}/start-streaming/": {
      "post": {
        "operationId": "onvif_cameras_start_streaming_create",
        "description": "Use this method to start streaming on ONVIF device.",
        "summary": "Start streaming on ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileTokenRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/stop-streaming/": {
      "post": {
        "operationId": "onvif_cameras_stop_streaming_create",
        "description": "Use this method to stop streaming on ONVIF device.",
        "summary": "Stop streaming on ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileTokenRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/stream-uri/": {
      "get": {
        "operationId": "onvif_cameras_stream_uri_retrieve",
        "description": "Use this method get stream URI from ONVIF device.",
        "summary": "Get stream URI from ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "profile_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF media profile token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/onvif-cameras/{id}/video-encoder-configurations/": {
      "get": {
        "operationId": "onvif_cameras_video_encoder_configurations_retrieve",
        "description": "This operation lists all existing video encoder configurations of ONVIF device.",
        "summary": "Get video encoder configurations of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "patch": {
        "operationId": "onvif_cameras_video_encoder_configurations_partial_update",
        "description": "This operation modifies a video encoder configuration.",
        "summary": "Update video encoder configurations of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOnvifSetVideoEncoderRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/video-encoder-configurations-options/": {
      "get": {
        "operationId": "onvif_cameras_video_encoder_configurations_options_retrieve",
        "description": "This operation returns the available options when the video encoder parameters are reconfigured.",
        "summary": "Get video encoder configurations options of ONVIF device",
        "parameters": [
          {
            "in": "query",
            "name": "configuration_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF video encoder configuration token"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "profile_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF media profile token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/video-source-configurations/": {
      "get": {
        "operationId": "onvif_cameras_video_source_configurations_retrieve",
        "description": "This operation lists all existing video source configurations for ONVIF device",
        "summary": "Get video source configurations of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "patch": {
        "operationId": "onvif_cameras_video_source_configurations_partial_update",
        "description": "This operation modifies a video source configuration.",
        "summary": "Update video source configurations of ONVIF device",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOnvifSetVideoSourceRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/onvif-cameras/{id}/video-source-configurations-options/": {
      "get": {
        "operationId": "onvif_cameras_video_source_configurations_options_retrieve",
        "description": "This operation returns the available options when the video source parameters are reconfigured",
        "summary": "Get available options for video sources configurations of ONVIF device",
        "parameters": [
          {
            "in": "query",
            "name": "configuration_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF video source configuration token"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Onvif camera.",
            "required": true
          },
          {
            "in": "query",
            "name": "profile_token",
            "schema": {
              "type": "string"
            },
            "description": "ONVIF media profile token"
          }
        ],
        "tags": [
          "onvif-cameras"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnvifCamera"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/": {
      "get": {
        "operationId": "permissions_list",
        "description": "Use this method to list all permissions in the system.",
        "summary": "List all permissions in the system",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPermissionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/{id}/": {
      "get": {
        "operationId": "permissions_retrieve",
        "description": "Use this method to retrieve a permission info by its ID.",
        "summary": "Retrieve permission info by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this permission.",
            "required": true
          }
        ],
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/camera-groups/": {
      "get": {
        "operationId": "permissions_camera_groups_list",
        "description": "Use this method to list camera groups permissions.",
        "summary": "List camera groups permissions",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `i`, `d`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCameraGroupPermissionsList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/camera-groups/{id}/": {
      "get": {
        "operationId": "permissions_camera_groups_retrieve",
        "summary": "Retrieve camera group permissions by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera groups.",
            "required": true
          }
        ],
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGroupPermissions"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "permissions_camera_groups_partial_update",
        "summary": "Update camera group permissions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Camera groups.",
            "required": true
          }
        ],
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCameraGroupPermissionsRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraGroupPermissions"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/watch-lists/": {
      "get": {
        "operationId": "permissions_watch_lists_list",
        "description": "Use this method to list watch lists permissions.",
        "summary": "List watch lists permissions",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedWatchListPermissionsList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/permissions/watch-lists/{id}/": {
      "get": {
        "operationId": "permissions_watch_lists_retrieve",
        "description": "Use this method to retrieve a watch list permissions by its ID.",
        "summary": "Retrieve watch list permissions by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Watch list.",
            "required": true
          }
        ],
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListPermissions"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "permissions_watch_lists_partial_update",
        "description": "Use this method to update a watch list permissions.",
        "summary": "Update watch list permissions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Watch list.",
            "required": true
          }
        ],
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedWatchListPermissionsRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListPermissions"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/relation-links/human/": {
      "get": {
        "operationId": "relation_links_human_list",
        "parameters": [
          {
            "in": "query",
            "name": "card",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select card relation links connected in these cards",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select card relation links with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select card relation links where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relation",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select card relation links included in these relations",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "relation-links"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVerboseRelationHumanCardLinkList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "relation_links_human_create",
        "tags": [
          "relation-links"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationHumanCardLinkRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationHumanCardLink"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/relation-links/human/{id}/": {
      "get": {
        "operationId": "relation_links_human_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation human card link.",
            "required": true
          }
        ],
        "tags": [
          "relation-links"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerboseRelationHumanCardLink"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "relation_links_human_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation human card link.",
            "required": true
          }
        ],
        "tags": [
          "relation-links"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationHumanCardLinkRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationHumanCardLink"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "relation_links_human_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation human card link.",
            "required": true
          }
        ],
        "tags": [
          "relation-links"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRelationHumanCardLinkRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationHumanCardLink"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "relation_links_human_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation human card link.",
            "required": true
          }
        ],
        "tags": [
          "relation-links"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/relations/": {
      "get": {
        "operationId": "relations_list",
        "parameters": [
          {
            "in": "query",
            "name": "car_card",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Pass comma-separated values to select relations containing at least one of these `car_card`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "human_card",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Pass comma-separated values to select relations containing at least one of these `human_card`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select relations with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select card relations where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "relations"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRelationList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "relations_create",
        "tags": [
          "relations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relation"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/relations/{id}/": {
      "get": {
        "operationId": "relations_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation.",
            "required": true
          }
        ],
        "tags": [
          "relations"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relation"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "relations_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation.",
            "required": true
          }
        ],
        "tags": [
          "relations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relation"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "relations_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation.",
            "required": true
          }
        ],
        "tags": [
          "relations"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRelationRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relation"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "relations_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this relation.",
            "required": true
          }
        ],
        "tags": [
          "relations"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/reports/": {
      "get": {
        "operationId": "reports_list",
        "description": "Use this method to list reports.",
        "summary": "List reports",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select reports with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select reports where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `modified_date`, `size`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReportList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "reports_create",
        "description": "Use this method to add a new report.",
        "summary": "Add a new report",
        "tags": [
          "reports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/reports/{id}/": {
      "get": {
        "operationId": "reports_retrieve",
        "description": "Use this method to retrieve a report by its ID.",
        "summary": "Retrieve report by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Report.",
            "required": true
          }
        ],
        "tags": [
          "reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "reports_destroy",
        "description": "Use this method to delete a report.",
        "summary": "Delete report",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Report.",
            "required": true
          }
        ],
        "tags": [
          "reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/reports/{id}/restart/": {
      "post": {
        "operationId": "reports_restart_create",
        "description": "Use this method to restart report processing.",
        "summary": "Restart report processing",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Report.",
            "required": true
          }
        ],
        "tags": [
          "reports"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/sessions/": {
      "get": {
        "operationId": "sessions_list",
        "description": "Use this method to list auth sessions.",
        "summary": "List auth sessions",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active (`true`) or inactive (`false`) sessions. Inactive sessions appear only if `face_and_password` authentication is set"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select sessions with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "ip_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select sessions with `ip` in these **subnets** / **IP addresses** (both supported)",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mobile",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only mobile (`true`) or desktop (`false`) sessions"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `created`, `last_ping_date`, `mobile`, `status`, `user__username`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "blocked",
                  "offline",
                  "online"
                ]
              }
            },
            "description": "Session status",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "user_id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select sessions related to users with provided `id`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "user_name_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select sessions related to users with provided `user_name`s",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "uuid_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select sessions related to one or multiple `uuid`s",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAuthSessionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/sessions/{id}/": {
      "get": {
        "operationId": "sessions_retrieve",
        "description": "Use this method to retrieve an auth session by ID.",
        "summary": "Retrieve auth session by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this ff sec auth session.",
            "required": true
          }
        ],
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSession"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "sessions_destroy",
        "description": "Use this method to delete auth session.",
        "summary": "Delete auth session",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this ff sec auth session.",
            "required": true
          }
        ],
        "tags": [
          "sessions"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/sessions/delete/": {
      "post": {
        "operationId": "sessions_delete_create",
        "description": "Use this method to delete multiple auth sessions with provided ids",
        "summary": "Delete sessions with provided ids",
        "tags": [
          "sessions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineCloseMultipleSessionsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "operationId": "settings_retrieve",
        "description": "Use this method to retrieve the FindFace Multi settings.",
        "summary": "Retrieve FF.Multi settings",
        "tags": [
          "settings"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "settings_partial_update",
        "description": "Use this method to update the FindFace Multi settings.",
        "summary": "Update FF.Multi settings",
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSettingsRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "operationId": "swagger.json_retrieve",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": [
                "af",
                "ar",
                "ar-dz",
                "ast",
                "az",
                "be",
                "bg",
                "bn",
                "br",
                "bs",
                "ca",
                "cs",
                "cy",
                "da",
                "de",
                "dsb",
                "el",
                "en",
                "en-au",
                "en-gb",
                "eo",
                "es",
                "es-ar",
                "es-co",
                "es-mx",
                "es-ni",
                "es-ve",
                "et",
                "eu",
                "fa",
                "fi",
                "fr",
                "fy",
                "ga",
                "gd",
                "gl",
                "he",
                "hi",
                "hr",
                "hsb",
                "hu",
                "hy",
                "ia",
                "id",
                "ig",
                "io",
                "is",
                "it",
                "ja",
                "ka",
                "kab",
                "kk",
                "km",
                "kn",
                "ko",
                "ky",
                "lb",
                "lt",
                "lv",
                "mk",
                "ml",
                "mn",
                "mr",
                "my",
                "nb",
                "ne",
                "nl",
                "nn",
                "os",
                "pa",
                "pl",
                "pt",
                "pt-br",
                "ro",
                "ru",
                "sk",
                "sl",
                "sq",
                "sr",
                "sr-latn",
                "sv",
                "sw",
                "ta",
                "te",
                "tg",
                "th",
                "tk",
                "tr",
                "tt",
                "udm",
                "uk",
                "ur",
                "uz",
                "vi",
                "zh-hans",
                "zh-hant"
              ]
            }
          }
        ],
        "tags": [
          "swagger.json"
        ],
        "security": [
          {
            "Bearer": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "str┃int┃float┃bool┃object┃array┃null"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "str┃int┃float┃bool┃object┃array┃null"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user-face/": {
      "get": {
        "operationId": "user_face_list",
        "description": "This method allows to get list of user-face objects.\n **User-face** is an object that contains source photo, thumbnail, etc",
        "summary": "List user-faces",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active objects (`true`) or inactive (`false`)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Select objects with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "user",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select user faces for these `users`",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "user-face"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserFaceUpdateList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "user_face_create",
        "description": "This method allows to create a user-face object.\n **User-face** is an object that contains source photo, thumbnail, etc",
        "summary": "Add a user-face",
        "tags": [
          "user-face"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserFaceRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFaceUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/user-face/{id}/": {
      "get": {
        "operationId": "user_face_retrieve",
        "description": "This method allows to get a user-face object by id.\n **User-face** is an object that contains source photo, thumbnail, etc",
        "summary": "Retrieve user-face by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "user-face"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFaceUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "user_face_partial_update",
        "summary": "Update user-face properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "user-face"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserFaceUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFaceUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "user_face_destroy",
        "summary": "Delete user-face",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "user-face"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "operationId": "users_list",
        "description": "Use this method to list users.",
        "summary": "List users",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active users (`true`) or inactive (`false`) users"
          },
          {
            "in": "query",
            "name": "date_joined_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **greater** than this value"
          },
          {
            "in": "query",
            "name": "date_joined_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "date_joined_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **less** than this value"
          },
          {
            "in": "query",
            "name": "date_joined_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select users belonging to this group. ",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_face",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only users with uploaded image (`true`) or without an image (`false`)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select users with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "language",
            "schema": {
              "type": "string",
              "enum": [
                "en-us",
                "es",
                "ru"
              ]
            },
            "description": "Get users with this language selected"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `date_joined`, `modified_date`, `username`, `first_name`, `last_name`, `primary_group`, `is_active`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "primary_group",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select users whose primary group is this group. ",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "real_name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select users where the SQL condition `real_name ILIKE real_name_contains` is true"
          },
          {
            "in": "query",
            "name": "username_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select users where the SQL condition `username ILIKE username_contains` is true"
          }
        ],
        "tags": [
          "users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "users_create",
        "description": "Use this method to add a new user.",
        "summary": "Add a new user",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/users/{id}/": {
      "get": {
        "operationId": "users_retrieve",
        "description": "Use this method to retrieve information on the current user.",
        "summary": "Retrieve user by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this User.",
            "required": true
          }
        ],
        "tags": [
          "users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "users_partial_update",
        "description": "Use this method to update a user data.",
        "summary": "Update user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this User.",
            "required": true
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "users_destroy",
        "description": "Use this method to delete a user.",
        "summary": "Delete user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this User.",
            "required": true
          }
        ],
        "tags": [
          "users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/users/count/": {
      "get": {
        "operationId": "users_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only active users (`true`) or inactive (`false`) users"
          },
          {
            "in": "query",
            "name": "date_joined_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **greater** than this value"
          },
          {
            "in": "query",
            "name": "date_joined_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "date_joined_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **less** than this value"
          },
          {
            "in": "query",
            "name": "date_joined_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `date_joined` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select users belonging to this group. ",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_face",
            "schema": {
              "type": "boolean"
            },
            "description": "Select only users with uploaded image (`true`) or without an image (`false`)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select users with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "language",
            "schema": {
              "type": "string",
              "enum": [
                "en-us",
                "es",
                "ru"
              ]
            },
            "description": "Get users with this language selected"
          },
          {
            "in": "query",
            "name": "primary_group",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select users whose primary group is this group. ",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "real_name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select users where the SQL condition `real_name ILIKE real_name_contains` is true"
          },
          {
            "in": "query",
            "name": "username_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select users where the SQL condition `username ILIKE username_contains` is true"
          }
        ],
        "tags": [
          "users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/users/me/": {
      "get": {
        "operationId": "users_me_retrieve",
        "summary": "Retrieve info on current user",
        "tags": [
          "users"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/verify": {
      "get": {
        "operationId": "verify_retrieve",
        "description": "Compare two objects from different sources or object with a object within the same card and return the similarity between them.",
        "summary": "Compare two objects or object with object inside card and return similarity",
        "parameters": [
          {
            "in": "query",
            "name": "card_id",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "This field accepts the id of the card that holds object to compare."
          },
          {
            "in": "query",
            "name": "object1",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "This field can contain one of the following references:\n- `detection:<detection id>` - use a `Detection` object\n- `faceevent:<event id>` - use `FaceEvent`\n- `carevent:<event id>` - use `CarEvent`\n- `bodyevent:<event id>` - use `BodyEvent`\n- `faceobject:<face id>` - use `FaceObject`\n- `carobject:<face id>` - use `CarObject`\n- `bodyobject:<face id>` - use `BodyObject`\n",
            "required": true
          },
          {
            "in": "query",
            "name": "object2",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "Same as object1"
          }
        ],
        "tags": [
          "verify"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyResult"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/videos/": {
      "get": {
        "operationId": "videos_list",
        "description": "Use this method to list video archives.",
        "summary": "List video archives",
        "parameters": [
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select videos included in these camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select videos included in these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select video archives with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select video archives where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `name`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "save_to",
            "schema": {
              "type": "string"
            },
            "description": "Select video archives with this `save_to` field"
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVideoArchiveList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "videos_create",
        "description": "Use this method to add a new video archive. You have to either provide a video URL or use the `/video/{id}/upload/` method later.",
        "summary": "Add a new video archive",
        "tags": [
          "videos"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoArchiveRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoArchive"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/videos/{id}/": {
      "get": {
        "operationId": "videos_retrieve",
        "description": "Use this method to retrieve a video archive by its ID.",
        "summary": "Retrieve video archive by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoArchive"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "videos_update",
        "description": "Use this method to update a video archive properties.",
        "summary": "Update video archive properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoArchiveRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoArchive"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "videos_partial_update",
        "description": "Use this method to update a video archive properties.",
        "summary": "Update video archive properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedVideoArchiveRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoArchive"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "videos_destroy",
        "description": "Use this method to delete a video archive.",
        "summary": "Delete video archive",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/videos/{id}/file/": {
      "delete": {
        "operationId": "videos_file_destroy",
        "description": "Use this method to delete a video archive source file (no detected objects will be deleted).",
        "summary": "Delete video archive source file (no objects will be deleted)",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/videos/{id}/process/": {
      "post": {
        "operationId": "videos_process_create",
        "summary": "Start video archive processing",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/videos/{id}/screenshot/": {
      "get": {
        "operationId": "videos_screenshot_retrieve",
        "description": "Use this method to retrieve a screenshot of a video archive stream (can be cached).",
        "summary": "Retrieve a screenshot of the video stream (can be cached)",
        "parameters": [
          {
            "in": "query",
            "name": "height",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot height"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          },
          {
            "in": "query",
            "name": "quality",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot quality (the value can be ignored if the stream is not processed by the findface-video-worker)"
          },
          {
            "in": "query",
            "name": "rot",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Either request screenshot with ROT or without"
          },
          {
            "in": "query",
            "name": "width",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot width"
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "post": {
        "operationId": "videos_screenshot_create",
        "description": "Use this method to retrieve a screenshot of a video archive stream (cache invalidated).",
        "summary": "Retrieve a screenshot of the video stream (invalidates cache)",
        "parameters": [
          {
            "in": "query",
            "name": "height",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot height"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          },
          {
            "in": "query",
            "name": "quality",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot quality (the value can be ignored if the stream is not processed by the findface-video-worker)"
          },
          {
            "in": "query",
            "name": "rot",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Either request screenshot with ROT or without"
          },
          {
            "in": "query",
            "name": "width",
            "schema": {
              "type": "integer"
            },
            "description": "Screenshot width"
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/videos/{id}/stop/": {
      "post": {
        "operationId": "videos_stop_create",
        "description": "Use this method to stop video archive processing.",
        "summary": "Stop video archive processing",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/videos/{id}/upload/source_file/": {
      "put": {
        "operationId": "videos_upload_source_file_update",
        "description": "This method uploads a video file passed in the request body. The method can't be tried out from this documentation viewer.",
        "summary": "Upload video file",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Video archive.",
            "required": true
          }
        ],
        "tags": [
          "videos"
        ],
        "requestBody": {
          "content": {
            "video/mp4": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "No response body"
          }
        }
      }
    },
    "/videos/count/": {
      "get": {
        "operationId": "videos_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "camera_groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select videos included in these camera groups",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "case_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "nullable": true
              }
            },
            "description": "Select videos included in these cases",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select video archives with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name_contains",
            "schema": {
              "type": "string"
            },
            "description": "Select video archives where the SQL condition `name ILIKE name_contains` is true"
          },
          {
            "in": "query",
            "name": "save_to",
            "schema": {
              "type": "string"
            },
            "description": "Select video archives with this `save_to` field"
          }
        ],
        "tags": [
          "videos"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/vms/archive/": {
      "get": {
        "operationId": "vms_archive_retrieve",
        "description": "Use this method to retrieve video archive stream link",
        "summary": "Retrieve video archive stream link",
        "parameters": [
          {
            "in": "query",
            "name": "camera",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related camera"
          },
          {
            "in": "query",
            "name": "max_height",
            "schema": {
              "type": "integer",
              "maximum": 4096,
              "minimum": 90,
              "default": 1080
            },
            "description": "Maximum frame height"
          },
          {
            "in": "query",
            "name": "max_width",
            "schema": {
              "type": "integer",
              "maximum": 4096,
              "minimum": 160,
              "default": 1920
            },
            "description": "Maximum frame width"
          },
          {
            "in": "query",
            "name": "quality",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "Video quality"
          },
          {
            "in": "query",
            "name": "speed",
            "schema": {
              "type": "number",
              "format": "float",
              "maximum": 1.0,
              "minimum": 1.0,
              "default": 1.0
            },
            "description": "Video speed(1.0 - normal speed and it is the only speed supported now)"
          },
          {
            "in": "query",
            "name": "time_from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Video archive start date (UTC)",
            "required": true
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related video archive"
          }
        ],
        "tags": [
          "vms"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMSArchiveResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/vms/cleanup/": {
      "post": {
        "operationId": "vms_cleanup_create",
        "description": "Use this method to delete all chunks from interval",
        "summary": "Delete all chunks from interval",
        "parameters": [
          {
            "in": "query",
            "name": "camera",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related camera"
          },
          {
            "in": "query",
            "name": "time_from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Delete chunks from this date (UTC) or all chunks before `time_to` if not passed"
          },
          {
            "in": "query",
            "name": "time_to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Delete chunks until this date (UTC)",
            "required": true
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related video archive"
          }
        ],
        "tags": [
          "vms"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/vms/download/": {
      "get": {
        "operationId": "vms_download_retrieve",
        "description": "Use this method to download all chunks from interval",
        "summary": "Download all chunks from interval",
        "parameters": [
          {
            "in": "query",
            "name": "camera",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related camera"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "bytes",
                "json"
              ]
            }
          },
          {
            "in": "query",
            "name": "time_from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Download video from this date (UTC)",
            "required": true
          },
          {
            "in": "query",
            "name": "time_to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Download video until this date (UTC)",
            "required": true
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related video archive"
          }
        ],
        "tags": [
          "vms"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "video/x-matroska": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "str┃int┃float┃bool┃object┃array┃null"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/vms/timeline/": {
      "get": {
        "operationId": "vms_timeline_retrieve",
        "description": "Use this method to retrieve timeline info",
        "summary": "Retrieve timeline info",
        "parameters": [
          {
            "in": "query",
            "name": "camera",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related camera"
          },
          {
            "in": "query",
            "name": "gap_threshold",
            "schema": {
              "type": "string",
              "minLength": 1,
              "default": "1s",
              "maxLength": 30
            },
            "description": "Max gap threshold between intervals (format: 3s, 1m, 3h, 1h3m10s)."
          },
          {
            "in": "query",
            "name": "time_from",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Timeline start date (UTC)",
            "required": true
          },
          {
            "in": "query",
            "name": "time_to",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Timeline end date (UTC)",
            "required": true
          },
          {
            "in": "query",
            "name": "video_archive",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "description": "Related video archive"
          }
        ],
        "tags": [
          "vms"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMSTimelineResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/watch-lists/": {
      "get": {
        "operationId": "watch_lists_list",
        "description": "Use this method to list watch lists.",
        "summary": "List watch lists",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select watch lists with provided ids",
            "explode": true,
            "style": "form"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ordering",
            "required": false,
            "in": "query",
            "description": "Which field to use when ordering the results. Available fields: `id`, `created_date`, `modified_date`",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "watch-lists"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedWatchListList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "watch_lists_create",
        "description": "Use this method to add a new watch list.",
        "summary": "Add a new watch list",
        "tags": [
          "watch-lists"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchListRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/watch-lists/{id}/": {
      "get": {
        "operationId": "watch_lists_retrieve",
        "description": "Use this method to retrieve a watch list by its ID.",
        "summary": "Retrieve watch list by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Watch list.",
            "required": true
          }
        ],
        "tags": [
          "watch-lists"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "watch_lists_partial_update",
        "description": "Use this method to update a watch list properties.",
        "summary": "Update watch list properties",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Watch list.",
            "required": true
          }
        ],
        "tags": [
          "watch-lists"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedWatchListRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "watch_lists_destroy",
        "description": "Use this method to delete a watch list.",
        "summary": "Delete watch list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Watch list.",
            "required": true
          }
        ],
        "tags": [
          "watch-lists"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/watch-lists/{id}/purge/": {
      "post": {
        "operationId": "watch_lists_purge_create",
        "description": "Use this method to delete all cards from a watch list.",
        "summary": "Delete all cards from watch list",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this Watch list.",
            "required": true
          }
        ],
        "tags": [
          "watch-lists"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/watch-lists/count/": {
      "get": {
        "operationId": "watch_lists_count_retrieve",
        "description": "This method retrieves count of objects.",
        "summary": "Objects count",
        "parameters": [
          {
            "in": "query",
            "name": "created_date_gt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater** than this value"
          },
          {
            "in": "query",
            "name": "created_date_gte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **greater than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_last_n_days",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last N days"
          },
          {
            "in": "query",
            "name": "created_date_lt",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less** than this value"
          },
          {
            "in": "query",
            "name": "created_date_lte",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Select objects with `created_date` **less than or equal** to this value"
          },
          {
            "in": "query",
            "name": "created_date_nth_full_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (including Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "created_date_nth_work_week",
            "schema": {
              "type": "number"
            },
            "description": "Select objects with `created_date` in last Nth week (only working days, i.e. excluding Sunday and Saturday)"
          },
          {
            "in": "query",
            "name": "id_in",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Select watch lists with provided ids",
            "explode": true,
            "style": "form"
          }
        ],
        "tags": [
          "watch-lists"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/watch-lists/purge_all/": {
      "post": {
        "operationId": "watch_lists_purge_all_create",
        "description": "Use this method to delete all cards.",
        "summary": "Delete all cards",
        "tags": [
          "watch-lists"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeAllResponse"
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Area": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Area creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Area modification date"
          },
          "name": {
            "type": "string",
            "description": "Area name, up to 256 characters",
            "maxLength": 256
          },
          "enabled": {
            "type": "boolean",
            "description": "`true` if the area is enabled"
          },
          "trigger_count_gt": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "`gt` people on a frame are required for trigger activation"
          },
          "trigger_count_lt": {
            "type": "integer",
            "minimum": 1,
            "nullable": true,
            "description": "`lt` people on a frame are required for trigger activation"
          },
          "trigger_time": {
            "type": "integer",
            "minimum": 1,
            "description": "Minimum time in seconds conditions should be met to activate triggers"
          },
          "trigger_calendar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            },
            "nullable": true,
            "description": "Area activation calendar during which an area trigger can activate. Area trigger might remain active beyond calendar intervals if the trigger activation condition is still satisfied"
          },
          "camera_roi": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaCameraLink"
            }
          },
          "scheduled_now": {
            "type": "boolean",
            "readOnly": true
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true
          },
          "cameras": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Monitor area for these cameras"
          },
          "multi_camera": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "camera_groups",
          "camera_roi",
          "cameras",
          "created_date",
          "id",
          "modified_date",
          "multi_camera",
          "name",
          "scheduled_now",
          "trigger_time"
        ]
      },
      "AreaCameraLink": {
        "type": "object",
        "properties": {
          "roi": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Roi"
              }
            },
            "nullable": true,
            "description": "ROI points XY coordinates. *Example*: `[[0, 1000], [1000, 1000], [1000, 0], [0, 0]]`"
          },
          "camera": {
            "type": "integer"
          }
        },
        "required": [
          "camera"
        ]
      },
      "AreaCameraLinkRequest": {
        "type": "object",
        "properties": {
          "roi": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Roi"
              }
            },
            "nullable": true,
            "description": "ROI points XY coordinates. *Example*: `[[0, 1000], [1000, 1000], [1000, 0], [0, 0]]`"
          },
          "camera": {
            "type": "integer"
          }
        },
        "required": [
          "camera"
        ]
      },
      "AreaRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Area name, up to 256 characters",
            "maxLength": 256
          },
          "enabled": {
            "type": "boolean",
            "description": "`true` if the area is enabled"
          },
          "trigger_count_gt": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "`gt` people on a frame are required for trigger activation"
          },
          "trigger_count_lt": {
            "type": "integer",
            "minimum": 1,
            "nullable": true,
            "description": "`lt` people on a frame are required for trigger activation"
          },
          "trigger_time": {
            "type": "integer",
            "minimum": 1,
            "description": "Minimum time in seconds conditions should be met to activate triggers"
          },
          "trigger_calendar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarRequest"
            },
            "nullable": true,
            "description": "Area activation calendar during which an area trigger can activate. Area trigger might remain active beyond calendar intervals if the trigger activation condition is still satisfied"
          },
          "camera_roi": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaCameraLinkRequest"
            }
          }
        },
        "required": [
          "camera_roi",
          "name",
          "trigger_time"
        ]
      },
      "AreaTriggerActivation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "AreaTrigger activation date"
          },
          "area": {
            "type": "integer",
            "readOnly": true,
            "description": "AreaTrigger that was activated"
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "`true` if the area trigger is active at the moment. It remains active while conditions are met"
          },
          "duration": {
            "type": "integer",
            "readOnly": true,
            "description": "Time in seconds the trigger has been active"
          },
          "max_body_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Max people count on the frame during trigger work"
          }
        },
        "required": [
          "active",
          "area",
          "created_date",
          "duration",
          "id",
          "max_body_count"
        ]
      },
      "AreaTriggerRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "AreaTriggerRecord creation date"
          },
          "area": {
            "type": "integer",
            "readOnly": true,
            "description": "Area for which record is created"
          },
          "area_trigger_activation": {
            "type": "integer",
            "readOnly": true,
            "description": "Area trigger activation for which record is created"
          },
          "body_count": {
            "type": "integer",
            "readOnly": true,
            "description": "People count on the frame"
          },
          "body_bboxes": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "title": "Body bboxes"
                },
                "title": "Body bboxes"
              }
            },
            "readOnly": true,
            "description": "Array of the bbox coordinates of the counted bodies"
          },
          "camera": {
            "type": "integer",
            "readOnly": true
          },
          "fullframe": {
            "type": "string",
            "format": "uri"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri"
          },
          "camera_group": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "error": {
            "type": "boolean",
            "readOnly": true,
            "description": "Area service encountered an error while processing an area"
          },
          "error_msg": {
            "type": "string",
            "readOnly": true,
            "description": "Encountered error's message"
          },
          "roi": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Roi"
              }
            },
            "readOnly": true,
            "description": "ROI points XY coordinates. *Example*: `[[0, 1000], [1000, 1000], [1000, 0], [0, 0]]`"
          }
        },
        "required": [
          "area",
          "area_trigger_activation",
          "body_bboxes",
          "body_count",
          "camera",
          "camera_group",
          "created_date",
          "error",
          "error_msg",
          "fullframe",
          "id",
          "roi",
          "thumbnail"
        ]
      },
      "AreasFilters": {
        "type": "object",
        "properties": {
          "area_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          }
        }
      },
      "AreasFiltersRequest": {
        "type": "object",
        "properties": {
          "area_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          }
        }
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "related_entities": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            }
          },
          "action_details": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            }
          },
          "object_id": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date of action"
          },
          "user_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "description": "Id of the user who took action"
          },
          "user_login": {
            "type": "string",
            "nullable": true,
            "description": "Username of the user who took action",
            "maxLength": 128
          },
          "request_ip": {
            "type": "string",
            "description": "IP address from which the request came"
          },
          "device_uid": {
            "type": "string",
            "nullable": true,
            "description": "Unique device identifier",
            "maxLength": 512
          },
          "object_type": {
            "type": "string",
            "description": "Type of object with which the action was performed",
            "maxLength": 64
          },
          "action_type": {
            "type": "string",
            "description": "Object action type",
            "maxLength": 128
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID"
          }
        },
        "required": [
          "action_details",
          "action_type",
          "created_date",
          "id",
          "object_id",
          "object_type",
          "related_entities",
          "request_ip"
        ]
      },
      "AuthSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthSessionStatusEnum"
              }
            ],
            "readOnly": true,
            "description": "Session status"
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "Token is active"
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "description": "Device unique identifier"
          },
          "mobile": {
            "type": "boolean",
            "readOnly": true,
            "description": "Device is mobile"
          },
          "device_info": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            }
          },
          "ip": {
            "type": "string",
            "readOnly": true,
            "description": "Device ip address"
          },
          "last_ping_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Device last ping date"
          },
          "user__username": {
            "type": "string",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "active",
          "created_date",
          "device_info",
          "id",
          "ip",
          "last_ping_date",
          "mobile",
          "status",
          "user__username",
          "user_id",
          "uuid"
        ]
      },
      "AuthSessionStatusEnum": {
        "enum": [
          "online",
          "offline",
          "blocked"
        ],
        "type": "string"
      },
      "BboxIntersectionPointEnum": {
        "enum": [
          "top right",
          "middle right",
          "bottom right",
          "top center",
          "middle center",
          "bottom center",
          "top left",
          "middle left",
          "bottom left"
        ],
        "type": "string"
      },
      "BodyEventsFeaturesEnum": {
        "enum": [
          "color"
        ],
        "type": "string"
      },
      "BodyEventsFilters": {
        "type": "object",
        "properties": {
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched_card_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched": {
            "type": "boolean"
          },
          "confidence_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "allowed_bs_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temperature_gte": {
            "type": "number",
            "format": "float"
          },
          "liveness_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "headwear_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "upper_clothes_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "detailed_upper_clothes_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "top_color_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lower_clothes_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bottom_color_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bag_hand_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bag_ground_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bag_back_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vest_type_score_gte": {
            "type": "number",
            "format": "float"
          },
          "vest_type_score_lte": {
            "type": "number",
            "format": "float"
          },
          "vest_type_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "helmet_type_score_lte": {
            "type": "number",
            "format": "float"
          },
          "helmet_type_score_gte": {
            "type": "number",
            "format": "float"
          },
          "helmet_type_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "age_group_score_lte": {
            "type": "number",
            "format": "float"
          },
          "age_group_score_gte": {
            "type": "number",
            "format": "float"
          },
          "age_group_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gender_score_lte": {
            "type": "number",
            "format": "float"
          },
          "gender_score_gte": {
            "type": "number",
            "format": "float"
          },
          "gender_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BodyEventsFiltersRequest": {
        "type": "object",
        "properties": {
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched_card_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched": {
            "type": "boolean"
          },
          "confidence_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "allowed_bs_types": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "temperature_gte": {
            "type": "number",
            "format": "float"
          },
          "liveness_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "headwear_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "upper_clothes_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "detailed_upper_clothes_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "top_color_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "lower_clothes_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "bottom_color_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "bag_hand_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "bag_ground_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "bag_back_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "vest_type_score_gte": {
            "type": "number",
            "format": "float"
          },
          "vest_type_score_lte": {
            "type": "number",
            "format": "float"
          },
          "vest_type_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "helmet_type_score_lte": {
            "type": "number",
            "format": "float"
          },
          "helmet_type_score_gte": {
            "type": "number",
            "format": "float"
          },
          "helmet_type_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "age_group_score_lte": {
            "type": "number",
            "format": "float"
          },
          "age_group_score_gte": {
            "type": "number",
            "format": "float"
          },
          "age_group_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "gender_score_lte": {
            "type": "number",
            "format": "float"
          },
          "gender_score_gte": {
            "type": "number",
            "format": "float"
          },
          "gender_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "BoundsRequest": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "minimum": 0
          },
          "y": {
            "type": "integer",
            "minimum": 0
          },
          "width": {
            "type": "integer",
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "height",
          "width",
          "x",
          "y"
        ]
      },
      "BsTypeEnum": {
        "enum": [
          "realtime",
          "overall"
        ],
        "type": "string"
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "weekdays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeekdaysEnum"
            }
          },
          "start_at": {
            "type": "string",
            "description": "Time in format `HH:MM` in `UTC`"
          },
          "end_at": {
            "type": "string",
            "description": "Time in format `HH:MM` in `UTC`"
          }
        },
        "required": [
          "end_at",
          "start_at",
          "weekdays"
        ]
      },
      "CalendarRequest": {
        "type": "object",
        "properties": {
          "weekdays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeekdaysEnum"
            }
          },
          "start_at": {
            "type": "string",
            "minLength": 1,
            "description": "Time in format `HH:MM` in `UTC`"
          },
          "end_at": {
            "type": "string",
            "minLength": 1,
            "description": "Time in format `HH:MM` in `UTC`"
          }
        },
        "required": [
          "end_at",
          "start_at",
          "weekdays"
        ]
      },
      "Camera": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "group": {
            "type": "integer",
            "description": "Camera group"
          },
          "active": {
            "type": "boolean",
            "description": "Processing is active"
          },
          "name": {
            "type": "string",
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "url": {
            "type": "string"
          },
          "router_url": {
            "type": "string",
            "nullable": true
          },
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettings"
          },
          "vms_cleanup_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VmsCleanupSettings"
              }
            ],
            "nullable": true
          },
          "screenshot": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Screenshot URL"
          },
          "health_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "readOnly": true
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "maximum": 90.0,
            "minimum": -90.0,
            "nullable": true,
            "description": "Camera latitude"
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "maximum": 180.0,
            "minimum": -180.0,
            "nullable": true,
            "description": "Camera longitude"
          },
          "azimuth": {
            "type": "number",
            "format": "float",
            "maximum": 359.9,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera azimuth"
          },
          "face_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of faces from this camera"
          },
          "body_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of faces from this camera"
          },
          "car_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of faces from this camera"
          },
          "onvif_camera": {
            "type": "integer",
            "nullable": true,
            "description": "Related ONVIF camera object"
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera car confidence threshold"
          },
          "single_pass": {
            "type": "boolean",
            "default": false
          },
          "external_detector": {
            "type": "boolean",
            "default": false
          },
          "external_detector_token": {
            "type": "string",
            "readOnly": true,
            "description": "Use this token for events creation API"
          },
          "external_detector_settings": {
            "$ref": "#/components/schemas/ExternalDetectorSettings"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {}
          },
          "external_vms": {
            "type": "integer",
            "nullable": true,
            "description": "External VMS"
          },
          "external_vms_camera_id": {
            "type": "string",
            "nullable": true,
            "description": "External VMS camera id",
            "maxLength": 512
          }
        },
        "required": [
          "body_count",
          "car_count",
          "created_date",
          "external_detector_token",
          "face_count",
          "group",
          "health_status",
          "id",
          "modified_date",
          "name",
          "screenshot"
        ]
      },
      "CameraGroup": {
        "type": "object",
        "description": "`CameraGroup` is a collection of `Camera`s, set up in same location or used for similar purposes",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "active": {
            "type": "boolean",
            "description": "Process events from this camera group"
          },
          "name": {
            "type": "string",
            "description": "Short group name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description of the user, up to 2048 chars",
            "maxLength": 2048
          },
          "deduplicate": {
            "type": "boolean",
            "description": "True if events from this camera group are to be deduplicated"
          },
          "deduplicateDelay": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 0,
            "default": 15,
            "description": "Event deduplication timeout, default value is 15"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels used to allocate a certain ``findface-video-worker`` instance to process video streams from this camera group"
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group car confidence threshold"
          }
        },
        "required": [
          "created_date",
          "id",
          "modified_date",
          "name"
        ]
      },
      "CameraGroupPermissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Short group name, up to 256 characters"
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Permissions on this camera group"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CameraGroupRequest": {
        "type": "object",
        "description": "`CameraGroup` is a collection of `Camera`s, set up in same location or used for similar purposes",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Process events from this camera group"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short group name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description of the user, up to 2048 chars",
            "maxLength": 2048
          },
          "deduplicate": {
            "type": "boolean",
            "description": "True if events from this camera group are to be deduplicated"
          },
          "deduplicateDelay": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 0,
            "default": 15,
            "description": "Event deduplication timeout, default value is 15"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1
            },
            "description": "Labels used to allocate a certain ``findface-video-worker`` instance to process video streams from this camera group"
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group car confidence threshold"
          }
        },
        "required": [
          "name"
        ]
      },
      "CameraRequest": {
        "type": "object",
        "properties": {
          "group": {
            "type": "integer",
            "description": "Camera group"
          },
          "active": {
            "type": "boolean",
            "description": "Processing is active"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "url": {
            "type": "string",
            "minLength": 1
          },
          "router_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettingsRequest"
          },
          "vms_cleanup_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VmsCleanupSettingsRequest"
              }
            ],
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "maximum": 90.0,
            "minimum": -90.0,
            "nullable": true,
            "description": "Camera latitude"
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "maximum": 180.0,
            "minimum": -180.0,
            "nullable": true,
            "description": "Camera longitude"
          },
          "azimuth": {
            "type": "number",
            "format": "float",
            "maximum": 359.9,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera azimuth"
          },
          "onvif_camera": {
            "type": "integer",
            "nullable": true,
            "description": "Related ONVIF camera object"
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera car confidence threshold"
          },
          "single_pass": {
            "type": "boolean",
            "default": false
          },
          "external_detector": {
            "type": "boolean",
            "default": false
          },
          "external_detector_settings": {
            "$ref": "#/components/schemas/ExternalDetectorSettingsRequest"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {}
          },
          "external_vms": {
            "type": "integer",
            "nullable": true,
            "description": "External VMS"
          },
          "external_vms_camera_id": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "External VMS camera id",
            "maxLength": 512
          }
        },
        "required": [
          "group",
          "name"
        ]
      },
      "CameraStreamSettings": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "detectors": {
            "$ref": "#/components/schemas/Detectors"
          },
          "disable_drops": {
            "type": "boolean"
          },
          "ffmpeg_format": {
            "type": "string"
          },
          "ffmpeg_params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "imotion_threshold": {
            "type": "number",
            "format": "float"
          },
          "play_speed": {
            "type": "number",
            "format": "float"
          },
          "rot": {
            "type": "string"
          },
          "router_timeout_ms": {
            "type": "integer"
          },
          "router_verify_ssl": {
            "type": "boolean"
          },
          "start_stream_timestamp": {
            "type": "integer"
          },
          "stream_data_filter": {
            "type": "string"
          },
          "use_stream_timestamp": {
            "type": "boolean"
          },
          "video_transform": {
            "type": "string"
          },
          "enable_recorder": {
            "type": "boolean"
          },
          "enable_liveness": {
            "type": "boolean"
          }
        }
      },
      "CameraStreamSettingsRequest": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "detectors": {
            "$ref": "#/components/schemas/DetectorsRequest"
          },
          "disable_drops": {
            "type": "boolean"
          },
          "ffmpeg_format": {
            "type": "string"
          },
          "ffmpeg_params": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "imotion_threshold": {
            "type": "number",
            "format": "float"
          },
          "play_speed": {
            "type": "number",
            "format": "float"
          },
          "rot": {
            "type": "string"
          },
          "router_timeout_ms": {
            "type": "integer"
          },
          "router_verify_ssl": {
            "type": "boolean"
          },
          "start_stream_timestamp": {
            "type": "integer"
          },
          "stream_data_filter": {
            "type": "string"
          },
          "use_stream_timestamp": {
            "type": "boolean"
          },
          "video_transform": {
            "type": "string"
          },
          "enable_recorder": {
            "type": "boolean"
          },
          "enable_liveness": {
            "type": "boolean"
          }
        }
      },
      "CarEpisodesFilters": {
        "type": "object",
        "properties": {
          "allowed_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "events_count_gte": {
            "type": "integer",
            "minimum": 0
          },
          "events_count_lte": {
            "type": "integer",
            "minimum": 1
          },
          "car_matched": {
            "type": "boolean"
          }
        }
      },
      "CarEpisodesFiltersRequest": {
        "type": "object",
        "properties": {
          "allowed_types": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "events_count_gte": {
            "type": "integer",
            "minimum": 0
          },
          "events_count_lte": {
            "type": "integer",
            "minimum": 1
          },
          "car_matched": {
            "type": "boolean"
          }
        }
      },
      "CarEventsFeaturesEnum": {
        "enum": [
          "color",
          "description",
          "license_plate"
        ],
        "type": "string"
      },
      "CarEventsFilters": {
        "type": "object",
        "properties": {
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched_card_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched": {
            "type": "boolean"
          },
          "confidence_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "allowed_bs_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temperature_gte": {
            "type": "number",
            "format": "float"
          },
          "liveness_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "category_confidence_gte": {
            "type": "number",
            "format": "float"
          },
          "category_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "category_type_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "color_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "body_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "make_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "license_plate_number_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "license_plate_color_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "license_plate_color_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "license_plate_color_confidence_gte": {
            "type": "number",
            "format": "float"
          },
          "license_plate_country_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "license_plate_region_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "special_vehicle_type_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight_type_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weight_type_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "weight_type_confidence_gte": {
            "type": "number",
            "format": "float"
          },
          "orientation_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orientation_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "orientation_confidence_gte": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "CarEventsFiltersRequest": {
        "type": "object",
        "properties": {
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched_card_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched": {
            "type": "boolean"
          },
          "confidence_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "allowed_bs_types": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "temperature_gte": {
            "type": "number",
            "format": "float"
          },
          "liveness_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "category_confidence_gte": {
            "type": "number",
            "format": "float"
          },
          "category_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "category_type_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "color_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "body_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "make_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "model_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "license_plate_number_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "license_plate_color_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "license_plate_color_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "license_plate_color_confidence_gte": {
            "type": "number",
            "format": "float"
          },
          "license_plate_country_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "license_plate_region_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "special_vehicle_type_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "weight_type_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "weight_type_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "weight_type_confidence_gte": {
            "type": "number",
            "format": "float"
          },
          "orientation_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "orientation_confidence_lte": {
            "type": "number",
            "format": "float"
          },
          "orientation_confidence_gte": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "CardLooksLike": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "collection": {
            "type": "string",
            "nullable": true
          },
          "matched_object": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "collection",
          "confidence",
          "matched_object"
        ]
      },
      "ClusterLooksLike": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "matched_object": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "confidence",
          "matched_object"
        ]
      },
      "ClusterizationJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Clusterization creation date"
          },
          "finished_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Clusterization completion date"
          },
          "status": {
            "type": "string",
            "description": "Clusterization status",
            "maxLength": 256
          },
          "traceback": {
            "type": "string",
            "nullable": true,
            "description": "Traceback of exception; if job failed",
            "maxLength": 4096
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "ColorEnum": {
        "enum": [
          "green",
          "yellow",
          "red",
          "gray"
        ],
        "type": "string"
      },
      "CountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Objects count"
          }
        },
        "required": [
          "count"
        ]
      },
      "Counter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Counter creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Counter modification date"
          },
          "active": {
            "type": "boolean",
            "default": true
          },
          "name": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 2
          },
          "detect_faces": {
            "type": "boolean",
            "description": "`true` if face counting enabled"
          },
          "detect_silhouettes": {
            "type": "boolean",
            "description": "`true` if silhouette counting enabled"
          },
          "detect_cars": {
            "type": "boolean",
            "description": "`true` if cars counting enabled"
          },
          "count_interval": {
            "type": "integer",
            "minimum": 1
          },
          "roi": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "nullable": true,
            "description": "ROI XY coordinates for related cameras"
          },
          "cameras": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Count entities from these cameras (provide either `cameras` or `camera_groups` argument)"
          },
          "multi_camera": {
            "type": "boolean",
            "readOnly": true,
            "description": "Counter is related to multiple cameras or a single camera"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true
          },
          "health_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterStatus"
              }
            ],
            "readOnly": true
          },
          "now_faces": {
            "type": "integer",
            "readOnly": true
          },
          "now_cars": {
            "type": "integer",
            "readOnly": true
          },
          "now_bodies": {
            "type": "integer",
            "readOnly": true
          },
          "detect_proximity": {
            "type": "boolean",
            "description": "`true` if proximity detection enabled"
          },
          "proximity_calibration_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProximityCalibrationStatusEnum"
              }
            ],
            "readOnly": true,
            "description": "Calibration status"
          },
          "proximity_calibration_data_collection_end": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Calibration end date"
          },
          "overall_proximity_min": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "overall_proximity_max": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "overall_proximity_avg": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "now_proximity_min": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "now_proximity_max": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "now_proximity_avg": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "proximity_calibration_error": {
            "type": "string",
            "readOnly": true,
            "description": "Proximity calibration error description"
          }
        },
        "required": [
          "camera_groups",
          "cameras",
          "count_interval",
          "created_date",
          "health_status",
          "id",
          "modified_date",
          "multi_camera",
          "name",
          "now_bodies",
          "now_cars",
          "now_faces",
          "now_proximity_avg",
          "now_proximity_max",
          "now_proximity_min",
          "overall_proximity_avg",
          "overall_proximity_max",
          "overall_proximity_min",
          "proximity_calibration_data_collection_end",
          "proximity_calibration_error",
          "proximity_calibration_status"
        ]
      },
      "CounterFilters": {
        "type": "object",
        "properties": {
          "counter_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "faces_gte": {
            "type": "integer",
            "minimum": 1
          },
          "faces_lte": {
            "type": "integer",
            "minimum": 0
          },
          "silhouettes_gte": {
            "type": "integer",
            "minimum": 1
          },
          "silhouettes_lte": {
            "type": "integer",
            "minimum": 0
          },
          "cars_gte": {
            "type": "integer",
            "minimum": 1
          },
          "cars_lte": {
            "type": "integer",
            "minimum": 0
          },
          "proximity_min_lte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_min_gte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_avg_lte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_avg_gte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_max_lte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_max_gte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          }
        }
      },
      "CounterFiltersRequest": {
        "type": "object",
        "properties": {
          "counter_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "faces_gte": {
            "type": "integer",
            "minimum": 1
          },
          "faces_lte": {
            "type": "integer",
            "minimum": 0
          },
          "silhouettes_gte": {
            "type": "integer",
            "minimum": 1
          },
          "silhouettes_lte": {
            "type": "integer",
            "minimum": 0
          },
          "cars_gte": {
            "type": "integer",
            "minimum": 1
          },
          "cars_lte": {
            "type": "integer",
            "minimum": 0
          },
          "proximity_min_lte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_min_gte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_avg_lte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_avg_gte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_max_lte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "proximity_max_gte": {
            "type": "number",
            "format": "float",
            "minimum": 0
          }
        }
      },
      "CounterRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Counter record creation date"
          },
          "counter": {
            "type": "integer",
            "readOnly": true
          },
          "fullframe": {
            "type": "string",
            "format": "uri"
          },
          "faces_count": {
            "type": "integer",
            "readOnly": true,
            "description": "The number of counted faces"
          },
          "faces_bbox": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "title": "Faces bbox"
                },
                "title": "Faces bbox"
              }
            },
            "readOnly": true,
            "description": "Array of the bbox coordinates of the counted faces"
          },
          "silhouettes_count": {
            "type": "integer",
            "readOnly": true,
            "description": "The number of counted silhouettes"
          },
          "silhouettes_bbox": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "title": "Silhouettes bbox"
                },
                "title": "Silhouettes bbox"
              }
            },
            "readOnly": true,
            "description": "Array of the bbox coordinates of the counted silhouettes"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri"
          },
          "camera": {
            "type": "integer",
            "readOnly": true
          },
          "camera_group": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "error": {
            "type": "boolean",
            "readOnly": true,
            "description": "Counter service encountered an error while processing camera"
          },
          "error_msg": {
            "type": "string",
            "readOnly": true,
            "description": "Encountered error's message"
          },
          "proximity_min": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Minimum distance between 2 silhouettes"
          },
          "proximity_max": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Maximum distance between 2 silhouettes"
          },
          "proximity_avg": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Average distance between 2 silhouettes"
          },
          "proximity_distances": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648,
                "title": "Proximity distances"
              }
            },
            "readOnly": true,
            "description": "Distances matrix"
          },
          "cars_count": {
            "type": "integer",
            "readOnly": true,
            "description": "The number of counted cars"
          },
          "cars_bbox": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "title": "Cars bbox"
                },
                "title": "Cars bbox"
              }
            },
            "readOnly": true,
            "description": "Array of the bbox coordinates of the counted cars"
          }
        },
        "required": [
          "camera",
          "camera_group",
          "cars_bbox",
          "cars_count",
          "counter",
          "created_date",
          "error",
          "error_msg",
          "faces_bbox",
          "faces_count",
          "fullframe",
          "id",
          "proximity_avg",
          "proximity_distances",
          "proximity_max",
          "proximity_min",
          "silhouettes_bbox",
          "silhouettes_count",
          "thumbnail"
        ]
      },
      "CounterRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "default": true
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1000
          },
          "detect_faces": {
            "type": "boolean",
            "description": "`true` if face counting enabled"
          },
          "detect_silhouettes": {
            "type": "boolean",
            "description": "`true` if silhouette counting enabled"
          },
          "detect_cars": {
            "type": "boolean",
            "description": "`true` if cars counting enabled"
          },
          "count_interval": {
            "type": "integer",
            "minimum": 1
          },
          "roi": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "nullable": true,
            "description": "ROI XY coordinates for related cameras"
          },
          "cameras": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Count entities from these cameras (provide either `cameras` or `camera_groups` argument)"
          },
          "detect_proximity": {
            "type": "boolean",
            "description": "`true` if proximity detection enabled"
          }
        },
        "required": [
          "cameras",
          "count_interval",
          "name"
        ]
      },
      "CounterStatus": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterStatusStatusEnum"
              }
            ],
            "description": "Status code"
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorEnum"
              }
            ],
            "description": "`Status` color code for UI."
          },
          "code_desc": {
            "type": "string",
            "description": "`Status` description for UI."
          },
          "statistic": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Counter statistics"
          }
        },
        "required": [
          "code_desc",
          "color",
          "statistic",
          "status"
        ]
      },
      "CounterStatusRequest": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterStatusStatusEnum"
              }
            ],
            "description": "Status code"
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorEnum"
              }
            ],
            "description": "`Status` color code for UI."
          },
          "code_desc": {
            "type": "string",
            "minLength": 1,
            "description": "`Status` description for UI."
          },
          "statistic": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Counter statistics"
          }
        },
        "required": [
          "code_desc",
          "color",
          "statistic",
          "status"
        ]
      },
      "CounterStatusStatusEnum": {
        "enum": [
          "IN_PROGRESS",
          "DISABLED"
        ],
        "type": "string"
      },
      "CreateEventsResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "required": [
          "errors",
          "events"
        ]
      },
      "CreateFaceEventsRequestMfSelectorEnum": {
        "enum": [
          "biggest",
          "all"
        ],
        "type": "string"
      },
      "CreateFaceEventsRequestRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "minLength": 1,
            "description": "Events creation api token"
          },
          "fullframe": {
            "type": "string",
            "format": "binary",
            "description": "Full frame of event"
          },
          "rotate": {
            "type": "boolean",
            "default": false,
            "description": "Try to rotate source"
          },
          "camera": {
            "type": "integer",
            "description": "Related camera"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of event"
          },
          "mf_selector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateFaceEventsRequestMfSelectorEnum"
              }
            ],
            "description": "This parameter defines Findface Multi behaviour when multiple objects\n are present on `fullframe` image.\n\n- `all` - Select all objects on `fullframe`\n- `biggest` - Select the biggest object on `fullframe`\n"
          },
          "roi": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            },
            "description": "ROI points coordinates for detection: left, top, right, bottom",
            "maxItems": 4,
            "minItems": 4
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Temperature (only for external detectors)"
          },
          "liveness": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Liveness (only for external detectors)"
          }
        },
        "required": [
          "camera",
          "fullframe",
          "mf_selector",
          "token"
        ]
      },
      "DetectAttrsRequest": {
        "type": "object",
        "properties": {
          "face": {
            "$ref": "#/components/schemas/DetectFaceFeatureRequest"
          },
          "car": {
            "$ref": "#/components/schemas/DetectCarFeatureRequest"
          },
          "body": {
            "$ref": "#/components/schemas/DetectBodyFeatureRequest"
          }
        }
      },
      "DetectBodyFeatureRequest": {
        "type": "object",
        "properties": {
          "color": {
            "type": "boolean"
          },
          "clothes": {
            "type": "boolean"
          },
          "bags": {
            "type": "boolean"
          },
          "protective_equipment": {
            "type": "boolean"
          },
          "age_gender": {
            "type": "boolean"
          }
        }
      },
      "DetectCarFeatureRequest": {
        "type": "object",
        "description": "Requested car features. Might be an empty dict",
        "properties": {
          "description": {
            "type": "boolean"
          },
          "license_plate": {
            "type": "boolean"
          },
          "special_vehicle_type": {
            "type": "boolean"
          },
          "category": {
            "type": "boolean"
          },
          "weight_type": {
            "type": "boolean"
          },
          "orientation": {
            "type": "boolean"
          }
        }
      },
      "DetectFaceFeatureRequest": {
        "type": "object",
        "properties": {
          "age": {
            "type": "boolean"
          },
          "beard": {
            "type": "boolean"
          },
          "emotions": {
            "type": "boolean"
          },
          "glasses": {
            "type": "boolean"
          },
          "gender": {
            "type": "boolean"
          },
          "medmask": {
            "type": "boolean"
          },
          "headpose": {
            "type": "boolean"
          }
        }
      },
      "DetectRequestRequest": {
        "type": "object",
        "properties": {
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Source image file"
          },
          "attributes": {
            "$ref": "#/components/schemas/DetectAttrsRequest"
          }
        },
        "required": [
          "attributes",
          "photo"
        ]
      },
      "DetectResponse": {
        "type": "object",
        "properties": {
          "orientation": {
            "type": "integer",
            "description": "EXIF orientation of the photo"
          },
          "objects": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Returned objects with requested attributes"
          }
        },
        "required": [
          "objects",
          "orientation"
        ]
      },
      "DetectorParameters": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "filter_max_size": {
            "type": "integer"
          },
          "filter_min_quality": {
            "type": "number",
            "format": "float"
          },
          "filter_min_size": {
            "type": "integer"
          },
          "fullframe_crop_rot": {
            "type": "boolean"
          },
          "fullframe_use_png": {
            "type": "boolean"
          },
          "jpeg_quality": {
            "type": "integer"
          },
          "overall_only": {
            "type": "boolean"
          },
          "post_best_track_frame": {
            "type": "boolean"
          },
          "post_best_track_normalize": {
            "type": "boolean"
          },
          "post_first_track_frame": {
            "type": "boolean"
          },
          "post_last_track_frame": {
            "type": "boolean"
          },
          "realtime_post_every_interval": {
            "type": "boolean"
          },
          "realtime_post_first_immediately": {
            "type": "boolean"
          },
          "realtime_post_interval": {
            "type": "number",
            "format": "float"
          },
          "roi": {
            "type": "string"
          },
          "track_interpolate_bboxes": {
            "type": "boolean"
          },
          "track_max_duration_frames": {
            "type": "integer"
          },
          "track_miss_interval": {
            "type": "integer"
          },
          "track_overlap_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "track_send_history": {
            "type": "boolean"
          },
          "tracker_type": {
            "type": "string"
          },
          "track_deep_sort_matching_threshold": {
            "type": "number",
            "format": "float"
          },
          "track_deep_sort_filter_unconfirmed_tracks": {
            "type": "boolean"
          }
        }
      },
      "DetectorParametersRequest": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "filter_max_size": {
            "type": "integer"
          },
          "filter_min_quality": {
            "type": "number",
            "format": "float"
          },
          "filter_min_size": {
            "type": "integer"
          },
          "fullframe_crop_rot": {
            "type": "boolean"
          },
          "fullframe_use_png": {
            "type": "boolean"
          },
          "jpeg_quality": {
            "type": "integer"
          },
          "overall_only": {
            "type": "boolean"
          },
          "post_best_track_frame": {
            "type": "boolean"
          },
          "post_best_track_normalize": {
            "type": "boolean"
          },
          "post_first_track_frame": {
            "type": "boolean"
          },
          "post_last_track_frame": {
            "type": "boolean"
          },
          "realtime_post_every_interval": {
            "type": "boolean"
          },
          "realtime_post_first_immediately": {
            "type": "boolean"
          },
          "realtime_post_interval": {
            "type": "number",
            "format": "float"
          },
          "roi": {
            "type": "string"
          },
          "track_interpolate_bboxes": {
            "type": "boolean"
          },
          "track_max_duration_frames": {
            "type": "integer"
          },
          "track_miss_interval": {
            "type": "integer"
          },
          "track_overlap_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "track_send_history": {
            "type": "boolean"
          },
          "tracker_type": {
            "type": "string"
          },
          "track_deep_sort_matching_threshold": {
            "type": "number",
            "format": "float"
          },
          "track_deep_sort_filter_unconfirmed_tracks": {
            "type": "boolean"
          }
        }
      },
      "Detectors": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "face": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetectorParameters"
              }
            ],
            "nullable": true
          },
          "body": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetectorParameters"
              }
            ],
            "nullable": true
          },
          "car": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetectorParameters"
              }
            ],
            "nullable": true
          }
        }
      },
      "DetectorsRequest": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "face": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetectorParametersRequest"
              }
            ],
            "nullable": true
          },
          "body": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetectorParametersRequest"
              }
            ],
            "nullable": true
          },
          "car": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DetectorParametersRequest"
              }
            ],
            "nullable": true
          }
        }
      },
      "DeviceBlacklistRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Record creation date"
          },
          "expire_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Record expiration date"
          },
          "uuid": {
            "type": "string",
            "description": "Device unique identifier",
            "maxLength": 256
          },
          "reason": {
            "type": "string",
            "description": "Blacklisting reason, up to 512 characters",
            "maxLength": 512
          }
        },
        "required": [
          "created_date",
          "id",
          "reason",
          "uuid"
        ]
      },
      "DeviceBlacklistRecordRequest": {
        "type": "object",
        "properties": {
          "expire_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Record expiration date"
          },
          "uuid": {
            "type": "string",
            "minLength": 1,
            "description": "Device unique identifier",
            "maxLength": 256
          },
          "reason": {
            "type": "string",
            "minLength": 1,
            "description": "Blacklisting reason, up to 512 characters",
            "maxLength": 512
          }
        },
        "required": [
          "reason",
          "uuid"
        ]
      },
      "EncodingEnum": {
        "enum": [
          "JPEG",
          "MPEG4",
          "H264"
        ],
        "type": "string"
      },
      "ExposureRequest": {
        "type": "object",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/ModeEnum"
          },
          "gain": {
            "type": "number",
            "format": "float",
            "description": "Gain level (for MANUAL mode)"
          },
          "iris": {
            "type": "number",
            "format": "float",
            "description": "Iris level (for MANUAL mode)"
          },
          "exposure_time": {
            "type": "number",
            "format": "float",
            "description": "Exposure time (for MANUAL mode)"
          },
          "min_gain": {
            "type": "number",
            "format": "float",
            "description": "Minimum gain level (for AUTO mode)"
          },
          "max_gain": {
            "type": "number",
            "format": "float",
            "description": "Maximum gain level (for AUTO mode)"
          },
          "min_iris": {
            "type": "number",
            "format": "float",
            "description": "Minimum iris level (for AUTO mode)"
          },
          "max_iris": {
            "type": "number",
            "format": "float",
            "description": "Maximum iris level (for AUTO mode)"
          },
          "min_exposure_time": {
            "type": "number",
            "format": "float",
            "description": "Minimum exposure time (for AUTO mode)"
          },
          "max_exposure_time": {
            "type": "number",
            "format": "float",
            "description": "Maxiumum exposure time (for AUTO mode)"
          }
        }
      },
      "ExtendedFaceEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "bs_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BsTypeEnum"
              }
            ],
            "readOnly": true
          },
          "camera": {
            "type": "integer",
            "readOnly": true,
            "description": "Related `Camera` id"
          },
          "camera_group": {
            "type": "integer",
            "readOnly": true,
            "description": "Related `CameraGroup` id"
          },
          "case": {
            "type": "integer",
            "readOnly": true,
            "description": "Related `Case` id"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "fullframe": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "matched_card": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "verbose_matched_card": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true,
            "nullable": true
          },
          "matched_cluster": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "matched_object": {
            "type": "string",
            "readOnly": true
          },
          "matched_lists": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "readOnly": true
          },
          "episode": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "video_archive": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "acknowledged": {
            "type": "boolean",
            "default": false
          },
          "acknowledged_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "acknowledged_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "acknowledged_reaction": {
            "type": "string",
            "default": ""
          },
          "frame_coords_left": {
            "type": "integer",
            "readOnly": true
          },
          "frame_coords_top": {
            "type": "integer",
            "readOnly": true
          },
          "frame_coords_right": {
            "type": "integer",
            "readOnly": true
          },
          "frame_coords_bottom": {
            "type": "integer",
            "readOnly": true
          },
          "matched": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "detector_params": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "looks_like_confidence": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "confidence": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "cluster_confidence": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "quality": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "external_detector": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "acknowledged_by",
          "acknowledged_date",
          "bs_type",
          "camera",
          "camera_group",
          "case",
          "cluster_confidence",
          "confidence",
          "created_date",
          "detector_params",
          "episode",
          "external_detector",
          "features",
          "frame_coords_bottom",
          "frame_coords_left",
          "frame_coords_right",
          "frame_coords_top",
          "fullframe",
          "id",
          "looks_like_confidence",
          "matched",
          "matched_card",
          "matched_cluster",
          "matched_lists",
          "matched_object",
          "meta",
          "quality",
          "temperature",
          "thumbnail",
          "verbose_matched_card",
          "video_archive"
        ]
      },
      "ExternalDetectorSettings": {
        "type": "object",
        "description": "External detector filters",
        "properties": {
          "filter_max_size": {
            "type": "integer",
            "minimum": 0
          },
          "filter_min_size": {
            "type": "integer",
            "minimum": 0
          },
          "filter_min_quality": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "roi": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "ExternalDetectorSettingsRequest": {
        "type": "object",
        "description": "External detector filters",
        "properties": {
          "filter_max_size": {
            "type": "integer",
            "minimum": 0
          },
          "filter_min_size": {
            "type": "integer",
            "minimum": 0
          },
          "filter_min_quality": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "roi": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "FaceCluster": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "tnt_id": {
            "type": "integer",
            "readOnly": true,
            "description": "Cluster tnt-id"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Cluster creation date"
          },
          "events_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Cluster events count"
          },
          "events_quality": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Average cluster events quality"
          },
          "cameras": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Cluster's cameras list"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Cluster's camera groups list"
          },
          "best_event": {
            "type": "integer",
            "readOnly": true,
            "description": "Best cluster event"
          },
          "best_event_quality": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Best cluster event quality"
          },
          "card": {
            "type": "integer",
            "readOnly": true,
            "description": "Related card"
          },
          "match_confidence": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Card match confidence"
          },
          "matched_lists": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Matched watch lists"
          },
          "pinned": {
            "type": "boolean",
            "description": "Whether cluster is pinned or not"
          },
          "looks_like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClusterLooksLike"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "looks_like_confidence": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "case": {
            "type": "integer",
            "readOnly": true,
            "description": "Related case"
          },
          "case_participant": {
            "type": "integer",
            "readOnly": true,
            "description": "Related case participant"
          },
          "gender": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster gender feature"
          },
          "age": {
            "type": "integer",
            "readOnly": true,
            "description": "Face cluster age feature"
          },
          "glasses": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster glasses feature"
          },
          "emotions": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster emotions feature"
          },
          "beard": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster beard feature"
          },
          "liveness": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster liveness feature"
          },
          "look": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster look feature"
          },
          "medmask": {
            "type": "string",
            "readOnly": true,
            "description": "Face cluster medmask feature"
          }
        },
        "required": [
          "age",
          "beard",
          "best_event",
          "best_event_quality",
          "camera_groups",
          "cameras",
          "card",
          "case",
          "case_participant",
          "created_date",
          "emotions",
          "events_count",
          "events_quality",
          "gender",
          "glasses",
          "id",
          "liveness",
          "look",
          "looks_like",
          "looks_like_confidence",
          "match_confidence",
          "matched_lists",
          "medmask",
          "tnt_id"
        ]
      },
      "FaceClusterEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "cluster": {
            "type": "integer"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Cluster event creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Cluster event modification date"
          },
          "score": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Event score; Used during clusterization"
          },
          "bbox": {
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "readOnly": true,
            "description": "Cluster event face bbox"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Cluster event thumbnail"
          },
          "fullframe": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Cluster event full frame"
          },
          "track_start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date of the first related track"
          },
          "track_end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "End date of the las related track"
          },
          "episode_last_event_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "End date of the related episode"
          },
          "episode_last_event_bbox": {
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "readOnly": true,
            "description": "Face bbox of the episode last event"
          },
          "episode_last_event_thumbnail": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Thumbnail of the episode last event"
          },
          "episode_last_event_fullframe": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Full frame of the episode last event"
          },
          "match_confidence": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Card match confidence"
          },
          "camera": {
            "type": "integer",
            "readOnly": true,
            "description": "Event's camera"
          },
          "video_archive": {
            "type": "integer",
            "readOnly": true,
            "description": "Event's video archive"
          },
          "case": {
            "type": "integer",
            "readOnly": true,
            "description": "Related case"
          },
          "episode": {
            "type": "integer",
            "readOnly": true,
            "description": "Related episode"
          },
          "matched_card": {
            "type": "integer",
            "readOnly": true,
            "description": "Matched card"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Cluster event camera groups list"
          },
          "matched_lists": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Matched watch lists"
          }
        },
        "required": [
          "attributes",
          "bbox",
          "camera",
          "camera_groups",
          "case",
          "cluster",
          "created_date",
          "episode",
          "episode_last_event_bbox",
          "episode_last_event_date",
          "episode_last_event_fullframe",
          "episode_last_event_thumbnail",
          "fullframe",
          "id",
          "match_confidence",
          "matched_card",
          "matched_lists",
          "modified_date",
          "score",
          "thumbnail",
          "video_archive"
        ]
      },
      "FaceClusterEventRequest": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer"
          },
          "track_start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date of the first related track"
          },
          "track_end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "End date of the las related track"
          }
        },
        "required": [
          "cluster"
        ]
      },
      "FaceEventsFeaturesEnum": {
        "enum": [
          "gender",
          "age",
          "emotions",
          "beard",
          "glasses",
          "look",
          "medmask"
        ],
        "type": "string"
      },
      "FaceEventsFilters": {
        "type": "object",
        "properties": {
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched_card_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched": {
            "type": "boolean"
          },
          "confidence_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "allowed_bs_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temperature_gte": {
            "type": "number",
            "format": "float"
          },
          "liveness_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "headpose_yaw_angle_gte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "headpose_yaw_angle_lte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "headpose_pitch_angle_gte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "headpose_pitch_angle_lte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "gender_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "age_lte": {
            "type": "integer",
            "minimum": 0
          },
          "age_gte": {
            "type": "integer",
            "minimum": 0
          },
          "glasses_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "emotions_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "beard_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medmask_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "liveness_in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FaceEventsFiltersRequest": {
        "type": "object",
        "properties": {
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched_card_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "matched": {
            "type": "boolean"
          },
          "confidence_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "allowed_bs_types": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "temperature_gte": {
            "type": "number",
            "format": "float"
          },
          "liveness_gte": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0
          },
          "headpose_yaw_angle_gte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "headpose_yaw_angle_lte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "headpose_pitch_angle_gte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "headpose_pitch_angle_lte": {
            "type": "integer",
            "maximum": 180,
            "minimum": -180
          },
          "gender_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "age_lte": {
            "type": "integer",
            "minimum": 0
          },
          "age_gte": {
            "type": "integer",
            "minimum": 0
          },
          "glasses_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "emotions_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "beard_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "medmask_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "liveness_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "FaceObjectRequest": {
        "type": "object",
        "properties": {
          "create_from": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "This field can contain one of the following references:\n- `detection:<detection id>`: use a `Detection` object (obtained with the `POST /detect`)\n  to select a object on `source_photo`.\n  (`source_photo` must contain the same image that was used for `POST /detect`)\n- `{face, body, or car}event:<event id>`: create new `Object` from an `Event`\n  (`source_photo` must be empty)\n- `{face, body, or car}object:<object id>`: use another `Object` as a template for this object\n  (`source_photo` must be empty)\n"
          },
          "detect_id": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "*This parameter is left only for compatibility reasons. Do not use it.*"
          },
          "mf_selector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MfSelectorA85Enum"
              }
            ],
            "writeOnly": true,
            "default": "reject",
            "description": "This parameter defines the FF.Multi default behaviour when there are multiple objects are present in\n`source_photo`, and `create_from` is not set.\n\n- `reject` - Reject `source_photo` with multiple objects\n- `biggest` - Select the biggest object in `source_photo`\n"
          },
          "upload_list": {
            "type": "integer",
            "description": "Add object to this upload list"
          },
          "source_photo": {
            "type": "string",
            "format": "binary",
            "description": "Source photo (**required** when `create_from` points to a `Detection` or empty)"
          },
          "frame_coords_left": {
            "type": "integer",
            "description": "Left border of object's bounding box"
          },
          "frame_coords_top": {
            "type": "integer",
            "description": "Top border of object's bounding box"
          },
          "frame_coords_right": {
            "type": "integer",
            "description": "Right border of object's bounding box"
          },
          "frame_coords_bottom": {
            "type": "integer",
            "description": "Bottom border of object's bounding box"
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "`true` if object is enabled"
          },
          "card": {
            "type": "integer",
            "description": "Related `card` ID"
          }
        },
        "required": [
          "card"
        ]
      },
      "FaceObjectUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "source_photo_name": {
            "type": "string",
            "readOnly": true,
            "description": "Filename supplied for `source_photo` on object creation"
          },
          "frame_coords_left": {
            "type": "integer",
            "description": "Left border of object's bounding box"
          },
          "frame_coords_top": {
            "type": "integer",
            "description": "Top border of object's bounding box"
          },
          "frame_coords_right": {
            "type": "integer",
            "description": "Right border of object's bounding box"
          },
          "frame_coords_bottom": {
            "type": "integer",
            "description": "Bottom border of object's bounding box"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Object thumbnail"
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "`true` if object is enabled"
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "card": {
            "type": "integer",
            "description": "Related `card` ID"
          }
        },
        "required": [
          "card",
          "created_date",
          "features",
          "id",
          "modified_date",
          "source_photo_name",
          "thumbnail"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 150
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ad_group": {
            "$ref": "#/components/schemas/GroupGuid"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GroupGuid": {
        "type": "object",
        "properties": {
          "group_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "required": [
          "group_guid"
        ]
      },
      "GroupGuidRequest": {
        "type": "object",
        "properties": {
          "group_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "required": [
          "group_guid"
        ]
      },
      "GroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "ad_group": {
            "$ref": "#/components/schemas/GroupGuidRequest"
          }
        },
        "required": [
          "name"
        ]
      },
      "HumanCard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "description": "`true` if the object is enabled"
          },
          "filled": {
            "type": "boolean",
            "readOnly": true,
            "description": "`true` if card is filled"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "name": {
            "type": "string",
            "description": "Card name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "watch_lists": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "looks_like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardLooksLike"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {}
          },
          "looks_like_confidence": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "active_after": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disable_schedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "recount_schedule_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "face_objects": {
            "type": "integer",
            "readOnly": true,
            "description": "Linked face objects counter"
          },
          "body_objects": {
            "type": "integer",
            "readOnly": true,
            "description": "Linked body objects counter"
          },
          "face_cluster": {
            "type": "integer",
            "readOnly": true
          },
          "body_cluster": {
            "type": "integer",
            "readOnly": true
          },
          "links_to_relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationHumanCardLink"
            },
            "readOnly": true
          }
        },
        "required": [
          "body_cluster",
          "body_objects",
          "created_date",
          "face_cluster",
          "face_objects",
          "filled",
          "id",
          "links_to_relations",
          "looks_like",
          "looks_like_confidence",
          "modified_date",
          "name",
          "recount_schedule_on",
          "watch_lists"
        ]
      },
      "HumanCardAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Attachment name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "file": {
            "type": "string",
            "format": "uri"
          },
          "size": {
            "type": "integer",
            "readOnly": true,
            "description": "File size"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "card": {
            "type": "integer"
          }
        },
        "required": [
          "card",
          "created_date",
          "file",
          "id",
          "size"
        ]
      },
      "HumanCardAttachmentRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attachment name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "file": {
            "type": "string",
            "format": "binary"
          },
          "card": {
            "type": "integer"
          }
        },
        "required": [
          "card",
          "file"
        ]
      },
      "HumanCardRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "`true` if the object is enabled"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Card name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "watch_lists": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {}
          },
          "active_after": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disable_schedule": {
            "$ref": "#/components/schemas/ScheduleRequest"
          }
        },
        "required": [
          "name",
          "watch_lists"
        ]
      },
      "HumanEpisode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Episode creation date based on the creation date of the event"
          },
          "closed_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Episode closing date"
          },
          "open": {
            "type": "boolean",
            "readOnly": true,
            "default": true
          },
          "events_count": {
            "type": "integer",
            "readOnly": true,
            "description": "The number of events in the episode"
          },
          "acknowledged": {
            "type": "boolean",
            "description": "`true` if the episode is acknowledged"
          },
          "acknowledged_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Acknowledgment date of the episode"
          },
          "acknowledged_by": {
            "type": "integer",
            "readOnly": true,
            "description": "User that acknowledged episode"
          },
          "acknowledged_reaction": {
            "type": "string",
            "description": "Episode acknowledgement reaction",
            "maxLength": 32
          },
          "cameras": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Camera list of the episode"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Episode camera group list"
          },
          "matched_lists": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Episode matched lists"
          },
          "video_archive": {
            "type": "integer",
            "readOnly": true,
            "description": "Related video archive id"
          },
          "matched_card": {
            "type": "integer",
            "readOnly": true,
            "description": "Matched card"
          },
          "case": {
            "type": "integer",
            "readOnly": true,
            "description": "Related case"
          },
          "face_features": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "last_face_event": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "matched_face_event": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "best_face_event": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "body_features": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "last_body_event": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "matched_body_event": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "best_body_event": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          }
        },
        "required": [
          "acknowledged_by",
          "acknowledged_date",
          "best_body_event",
          "best_face_event",
          "body_features",
          "camera_groups",
          "cameras",
          "case",
          "closed_date",
          "created_date",
          "events_count",
          "face_features",
          "id",
          "last_body_event",
          "last_face_event",
          "matched_body_event",
          "matched_card",
          "matched_face_event",
          "matched_lists",
          "open",
          "video_archive"
        ]
      },
      "HumanEpisodesFilters": {
        "type": "object",
        "properties": {
          "allowed_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "events_count_gte": {
            "type": "integer",
            "minimum": 0
          },
          "events_count_lte": {
            "type": "integer",
            "minimum": 1
          },
          "face_matched": {
            "type": "boolean"
          },
          "body_matched": {
            "type": "boolean"
          }
        }
      },
      "HumanEpisodesFiltersRequest": {
        "type": "object",
        "properties": {
          "allowed_types": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "matched_lists_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "camera_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            }
          },
          "camera_group_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": -1
            }
          },
          "events_count_gte": {
            "type": "integer",
            "minimum": 0
          },
          "events_count_lte": {
            "type": "integer",
            "minimum": 1
          },
          "face_matched": {
            "type": "boolean"
          },
          "body_matched": {
            "type": "boolean"
          }
        }
      },
      "InlineCloseMultipleSessionsRequest": {
        "type": "object",
        "properties": {
          "id_in": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "Delete sessions with these ids"
          }
        },
        "required": [
          "id_in"
        ]
      },
      "InlineStreamSettings": {
        "type": "object",
        "properties": {
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettings"
          }
        },
        "required": [
          "stream_settings"
        ]
      },
      "LanguageEnum": {
        "enum": [
          "en-us",
          "es",
          "ru"
        ],
        "type": "string"
      },
      "Line": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "name": {
            "type": "string",
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "active": {
            "type": "boolean",
            "description": "Line activity status"
          },
          "bbox_intersection_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BboxIntersectionPointEnum"
              }
            ],
            "description": "Bbox intersection type"
          },
          "points": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": 0,
                "title": "Points"
              },
              "minItems": 2
            },
            "description": "Array of the line x,y coordinates",
            "minItems": 2
          },
          "camera": {
            "type": "integer",
            "nullable": true,
            "description": "Related camera"
          },
          "video_archive": {
            "type": "integer",
            "nullable": true,
            "description": "Related video archive"
          }
        },
        "required": [
          "created_date",
          "id",
          "modified_date",
          "name",
          "points"
        ]
      },
      "LineRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "active": {
            "type": "boolean",
            "description": "Line activity status"
          },
          "bbox_intersection_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BboxIntersectionPointEnum"
              }
            ],
            "description": "Bbox intersection type"
          },
          "points": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": 0,
                "title": "Points"
              },
              "minItems": 2
            },
            "description": "Array of the line x,y coordinates",
            "minItems": 2
          },
          "camera": {
            "type": "integer",
            "nullable": true,
            "description": "Related camera"
          },
          "video_archive": {
            "type": "integer",
            "nullable": true,
            "description": "Related video archive"
          }
        },
        "required": [
          "name",
          "points"
        ]
      },
      "LoginRequestRequest": {
        "type": "object",
        "properties": {
          "video_auth_token": {
            "type": "string",
            "minLength": 1,
            "description": "Inactive token from face authorization. Required when `face_and_password` is set"
          },
          "uuid": {
            "type": "string",
            "minLength": 1,
            "description": "Device unique identifier",
            "maxLength": 256
          },
          "mobile": {
            "type": "boolean",
            "default": false,
            "description": "Device is mobile"
          },
          "device_info": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Device information"
          }
        },
        "required": [
          "uuid"
        ]
      },
      "LoginResult": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authorization token"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "User info"
          },
          "token_expiration_datetime": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiration datetime"
          }
        },
        "required": [
          "token",
          "token_expiration_datetime",
          "user"
        ]
      },
      "MetaDictionary": {
        "type": "object",
        "description": "`MetaDictionary` is a collection of values from which you can select a meta value",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "name": {
            "type": "string",
            "description": "Short dictionary name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          }
        },
        "required": [
          "created_date",
          "id",
          "modified_date",
          "name"
        ]
      },
      "MetaDictionaryRequest": {
        "type": "object",
        "description": "`MetaDictionary` is a collection of values from which you can select a meta value",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short dictionary name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "MetaDictionaryValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "dictionary": {
            "type": "integer"
          },
          "value": {
            "type": "string",
            "description": "Dictionary value",
            "maxLength": 256
          }
        },
        "required": [
          "dictionary",
          "id",
          "value"
        ]
      },
      "MetaDictionaryValueRequest": {
        "type": "object",
        "properties": {
          "dictionary": {
            "type": "integer"
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "description": "Dictionary value",
            "maxLength": 256
          }
        },
        "required": [
          "dictionary",
          "value"
        ]
      },
      "MfSelectorA85Enum": {
        "enum": [
          "biggest",
          "reject"
        ],
        "type": "string"
      },
      "ModeEnum": {
        "enum": [
          "AUTO",
          "MANUAL"
        ],
        "type": "string"
      },
      "MovementTypeEnum": {
        "enum": [
          "absolute",
          "relative"
        ],
        "type": "string"
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Notification type"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Notification creation date"
          },
          "acknowledged_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Notification acknowledgement date"
          },
          "acknowledged_reaction": {
            "type": "string",
            "description": "Notification acknowledgement reaction",
            "maxLength": 32
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "Notification acknowledgement reaction"
          },
          "subscribed_users": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "Users subscribed to the notification"
          },
          "event_id": {
            "type": "string",
            "readOnly": true,
            "description": "Event id"
          },
          "object_type": {
            "type": "string",
            "readOnly": true,
            "description": "Event object type"
          },
          "acknowledged_by": {
            "type": "integer",
            "readOnly": true,
            "description": "User that acknowledged notification"
          },
          "matched_watch_lists": {
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "readOnly": true,
            "description": "Ids of matched watchlists"
          },
          "camera_group": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "acknowledged_by",
          "acknowledged_date",
          "active",
          "camera_group",
          "created_date",
          "event_id",
          "id",
          "matched_watch_lists",
          "object_type",
          "subscribed_users",
          "type"
        ]
      },
      "NotificationRequest": {
        "type": "object",
        "properties": {
          "acknowledged_reaction": {
            "type": "string",
            "description": "Notification acknowledgement reaction",
            "maxLength": 32
          }
        }
      },
      "OnvifAuthRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "password",
          "username"
        ]
      },
      "OnvifCamera": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            }
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Onvif Camera creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Onvif Camera modification date"
          },
          "endpoint_reference": {
            "type": "string",
            "maxLength": 512
          },
          "need_reboot": {
            "type": "boolean"
          },
          "need_auth": {
            "type": "boolean"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          },
          "password": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          },
          "is_discovering": {
            "type": "boolean"
          }
        },
        "required": [
          "created_date",
          "endpoint_reference",
          "id",
          "meta",
          "modified_date"
        ]
      },
      "OnvifGetPresetsRequestRequest": {
        "type": "object",
        "properties": {
          "profile_token": {
            "type": "string",
            "minLength": 1,
            "description": "Onvif profile token"
          }
        },
        "required": [
          "profile_token"
        ]
      },
      "OnvifGetPresetsResponse": {
        "type": "object",
        "properties": {
          "presets": {
            "type": "object",
            "additionalProperties": {},
            "description": "Onvif PTZ presets"
          }
        },
        "required": [
          "presets"
        ]
      },
      "OnvifPTZMoveRequest": {
        "type": "object",
        "properties": {
          "movement_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MovementTypeEnum"
              }
            ],
            "description": "PTZ Movement type"
          },
          "pan": {
            "type": "number",
            "format": "float",
            "description": "Pan value for PTZ movement"
          },
          "tilt": {
            "type": "number",
            "format": "float",
            "description": "Tilt value for PTZ movement"
          },
          "zoom": {
            "type": "number",
            "format": "float",
            "description": "Zoom value for PTZ movement"
          }
        },
        "required": [
          "movement_type"
        ]
      },
      "OnvifPresetRequest": {
        "type": "object",
        "properties": {
          "profile_token": {
            "type": "string",
            "minLength": 1,
            "description": "Onvif profile token"
          },
          "preset_token": {
            "type": "string",
            "minLength": 1,
            "description": "Onvif PTZ preset token"
          }
        },
        "required": [
          "preset_token",
          "profile_token"
        ]
      },
      "OnvifSetPresetRequestRequest": {
        "type": "object",
        "properties": {
          "profile_token": {
            "type": "string",
            "minLength": 1,
            "description": "Onvif profile token"
          },
          "preset_token": {
            "type": "string",
            "minLength": 1,
            "description": "Onvif PTZ preset token"
          },
          "preset_name": {
            "type": "string",
            "minLength": 1,
            "description": "Onvif PTZ preset name"
          }
        },
        "required": [
          "preset_name",
          "preset_token",
          "profile_token"
        ]
      },
      "OnvifSetPresetResponse": {
        "type": "object",
        "properties": {
          "preset_token": {
            "type": "string",
            "description": "Onvif PTZ preset token"
          }
        },
        "required": [
          "preset_token"
        ]
      },
      "OnvifUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "minLength": 1
          },
          "user_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLevelEnum"
              }
            ],
            "default": "Administrator"
          }
        },
        "required": [
          "password",
          "username"
        ]
      },
      "PaginatedAreaList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Area"
            }
          }
        }
      },
      "PaginatedAreaTriggerActivationList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaTriggerActivation"
            }
          }
        }
      },
      "PaginatedAreaTriggerRecordList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaTriggerRecord"
            }
          }
        }
      },
      "PaginatedAuditLogList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLog"
            }
          }
        }
      },
      "PaginatedAuthSessionList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthSession"
            }
          }
        }
      },
      "PaginatedCameraGroupList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CameraGroup"
            }
          }
        }
      },
      "PaginatedCameraGroupPermissionsList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CameraGroupPermissions"
            }
          }
        }
      },
      "PaginatedCameraList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Camera"
            }
          }
        }
      },
      "PaginatedClusterizationJobList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterizationJob"
            }
          }
        }
      },
      "PaginatedCounterList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Counter"
            }
          }
        }
      },
      "PaginatedCounterRecordList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CounterRecord"
            }
          }
        }
      },
      "PaginatedDeviceBlacklistRecordList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceBlacklistRecord"
            }
          }
        }
      },
      "PaginatedExtendedFaceEventList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "count": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedFaceEvent"
            }
          }
        }
      },
      "PaginatedFaceClusterEventList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaceClusterEvent"
            }
          }
        }
      },
      "PaginatedFaceClusterList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaceCluster"
            }
          }
        }
      },
      "PaginatedFaceObjectUpdateList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "count": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaceObjectUpdate"
            }
          }
        }
      },
      "PaginatedGroupList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "PaginatedHumanCardAttachmentList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HumanCardAttachment"
            }
          }
        }
      },
      "PaginatedHumanCardList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HumanCard"
            }
          }
        }
      },
      "PaginatedHumanEpisodeList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HumanEpisode"
            }
          }
        }
      },
      "PaginatedLineList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Line"
            }
          }
        }
      },
      "PaginatedMetaDictionaryList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaDictionary"
            }
          }
        }
      },
      "PaginatedMetaDictionaryValueList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaDictionaryValue"
            }
          }
        }
      },
      "PaginatedNotificationList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          }
        }
      },
      "PaginatedOnvifCameraList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnvifCamera"
            }
          }
        }
      },
      "PaginatedPermissionList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "PaginatedRelationList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            }
          }
        }
      },
      "PaginatedReportList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          }
        }
      },
      "PaginatedUserFaceUpdateList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "count": {
            "type": "integer"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFaceUpdate"
            }
          }
        }
      },
      "PaginatedUserList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "PaginatedVerboseRelationHumanCardLinkList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerboseRelationHumanCardLink"
            }
          }
        }
      },
      "PaginatedVideoArchiveList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoArchive"
            }
          }
        }
      },
      "PaginatedWatchListList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WatchList"
            }
          }
        }
      },
      "PaginatedWatchListPermissionsList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WatchListPermissions"
            }
          }
        }
      },
      "PaginatedWebhookList": {
        "type": "object",
        "properties": {
          "next_page": {
            "type": "string",
            "nullable": true
          },
          "prev_page": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          }
        }
      },
      "PatchedAreaRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Area name, up to 256 characters",
            "maxLength": 256
          },
          "enabled": {
            "type": "boolean",
            "description": "`true` if the area is enabled"
          },
          "trigger_count_gt": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "`gt` people on a frame are required for trigger activation"
          },
          "trigger_count_lt": {
            "type": "integer",
            "minimum": 1,
            "nullable": true,
            "description": "`lt` people on a frame are required for trigger activation"
          },
          "trigger_time": {
            "type": "integer",
            "minimum": 1,
            "description": "Minimum time in seconds conditions should be met to activate triggers"
          },
          "trigger_calendar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarRequest"
            },
            "nullable": true,
            "description": "Area activation calendar during which an area trigger can activate. Area trigger might remain active beyond calendar intervals if the trigger activation condition is still satisfied"
          },
          "camera_roi": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaCameraLinkRequest"
            }
          }
        }
      },
      "PatchedCameraGroupPermissionsRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1
            },
            "description": "Permissions on this camera group"
          }
        }
      },
      "PatchedCameraGroupRequest": {
        "type": "object",
        "description": "`CameraGroup` is a collection of `Camera`s, set up in same location or used for similar purposes",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Process events from this camera group"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short group name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description of the user, up to 2048 chars",
            "maxLength": 2048
          },
          "deduplicate": {
            "type": "boolean",
            "description": "True if events from this camera group are to be deduplicated"
          },
          "deduplicateDelay": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 0,
            "default": 15,
            "description": "Event deduplication timeout, default value is 15"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1
            },
            "description": "Labels used to allocate a certain ``findface-video-worker`` instance to process video streams from this camera group"
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera group car confidence threshold"
          }
        }
      },
      "PatchedCameraRequest": {
        "type": "object",
        "properties": {
          "group": {
            "type": "integer",
            "description": "Camera group"
          },
          "active": {
            "type": "boolean",
            "description": "Processing is active"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "url": {
            "type": "string",
            "minLength": 1
          },
          "router_url": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettingsRequest"
          },
          "vms_cleanup_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VmsCleanupSettingsRequest"
              }
            ],
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "maximum": 90.0,
            "minimum": -90.0,
            "nullable": true,
            "description": "Camera latitude"
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "maximum": 180.0,
            "minimum": -180.0,
            "nullable": true,
            "description": "Camera longitude"
          },
          "azimuth": {
            "type": "number",
            "format": "float",
            "maximum": 359.9,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera azimuth"
          },
          "onvif_camera": {
            "type": "integer",
            "nullable": true,
            "description": "Related ONVIF camera object"
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Camera car confidence threshold"
          },
          "single_pass": {
            "type": "boolean",
            "default": false
          },
          "external_detector": {
            "type": "boolean",
            "default": false
          },
          "external_detector_settings": {
            "$ref": "#/components/schemas/ExternalDetectorSettingsRequest"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {}
          },
          "external_vms": {
            "type": "integer",
            "nullable": true,
            "description": "External VMS"
          },
          "external_vms_camera_id": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "description": "External VMS camera id",
            "maxLength": 512
          }
        }
      },
      "PatchedCounterRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "default": true
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 1000
          },
          "detect_faces": {
            "type": "boolean",
            "description": "`true` if face counting enabled"
          },
          "detect_silhouettes": {
            "type": "boolean",
            "description": "`true` if silhouette counting enabled"
          },
          "detect_cars": {
            "type": "boolean",
            "description": "`true` if cars counting enabled"
          },
          "count_interval": {
            "type": "integer",
            "minimum": 1
          },
          "roi": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "nullable": true,
            "description": "ROI XY coordinates for related cameras"
          },
          "cameras": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Count entities from these cameras (provide either `cameras` or `camera_groups` argument)"
          },
          "detect_proximity": {
            "type": "boolean",
            "description": "`true` if proximity detection enabled"
          }
        }
      },
      "PatchedExtendedFaceEventRequest": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "default": false
          },
          "acknowledged_reaction": {
            "type": "string",
            "minLength": 1,
            "default": ""
          }
        }
      },
      "PatchedFaceClusterEventRequest": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer"
          },
          "track_start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Creation date of the first related track"
          },
          "track_end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "End date of the las related track"
          }
        }
      },
      "PatchedFaceClusterRequest": {
        "type": "object",
        "properties": {
          "pinned": {
            "type": "boolean",
            "description": "Whether cluster is pinned or not"
          }
        }
      },
      "PatchedFaceObjectUpdateRequest": {
        "type": "object",
        "properties": {
          "frame_coords_left": {
            "type": "integer",
            "description": "Left border of object's bounding box"
          },
          "frame_coords_top": {
            "type": "integer",
            "description": "Top border of object's bounding box"
          },
          "frame_coords_right": {
            "type": "integer",
            "description": "Right border of object's bounding box"
          },
          "frame_coords_bottom": {
            "type": "integer",
            "description": "Bottom border of object's bounding box"
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "`true` if object is enabled"
          },
          "card": {
            "type": "integer",
            "description": "Related `card` ID"
          }
        }
      },
      "PatchedGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "ad_group": {
            "$ref": "#/components/schemas/GroupGuidRequest"
          }
        }
      },
      "PatchedHumanCardAttachmentRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attachment name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "file": {
            "type": "string",
            "format": "binary"
          },
          "card": {
            "type": "integer"
          }
        }
      },
      "PatchedHumanCardRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "`true` if the object is enabled"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Card name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "watch_lists": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {}
          },
          "active_after": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disable_schedule": {
            "$ref": "#/components/schemas/ScheduleRequest"
          }
        }
      },
      "PatchedHumanEpisodeRequest": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "`true` if the episode is acknowledged"
          },
          "acknowledged_reaction": {
            "type": "string",
            "description": "Episode acknowledgement reaction",
            "maxLength": 32
          }
        }
      },
      "PatchedLineRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "active": {
            "type": "boolean",
            "description": "Line activity status"
          },
          "bbox_intersection_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BboxIntersectionPointEnum"
              }
            ],
            "description": "Bbox intersection type"
          },
          "points": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": 0,
                "title": "Points"
              },
              "minItems": 2
            },
            "description": "Array of the line x,y coordinates",
            "minItems": 2
          },
          "camera": {
            "type": "integer",
            "nullable": true,
            "description": "Related camera"
          },
          "video_archive": {
            "type": "integer",
            "nullable": true,
            "description": "Related video archive"
          }
        }
      },
      "PatchedMetaDictionaryValueRequest": {
        "type": "object",
        "properties": {
          "dictionary": {
            "type": "integer"
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "description": "Dictionary value",
            "maxLength": 256
          }
        }
      },
      "PatchedOnvifSetImagingSettingsRequest": {
        "type": "object",
        "properties": {
          "video_source_token": {
            "type": "string",
            "minLength": 1,
            "description": "Token of video source configuration"
          },
          "brightness": {
            "type": "number",
            "format": "float",
            "description": "Brightness level"
          },
          "contrast": {
            "type": "number",
            "format": "float",
            "description": "Contrast level"
          },
          "sharpness": {
            "type": "number",
            "format": "float",
            "description": "Sharpness level"
          },
          "color_saturation": {
            "type": "number",
            "format": "float",
            "description": "Color saturation level"
          },
          "exposure": {
            "$ref": "#/components/schemas/ExposureRequest"
          }
        }
      },
      "PatchedOnvifSetVideoEncoderRequest": {
        "type": "object",
        "properties": {
          "configuration_token": {
            "type": "string",
            "minLength": 1
          },
          "encoding": {
            "$ref": "#/components/schemas/EncodingEnum"
          },
          "quality": {
            "type": "number",
            "format": "float"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionSeriazlierRequest"
          }
        }
      },
      "PatchedOnvifSetVideoSourceRequest": {
        "type": "object",
        "properties": {
          "configuration_token": {
            "type": "string",
            "minLength": 1
          },
          "bounds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BoundsRequest"
              }
            ],
            "description": "Bounds structure containing either the whole VideoSource pixel area or a sub-portion of it"
          }
        }
      },
      "PatchedOnvifUpdateRequest": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "minLength": 1
          },
          "create_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnvifUserRequest"
            }
          },
          "delete_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnvifUserRequest"
            }
          }
        }
      },
      "PatchedRelationHumanCardLinkRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "card": {
            "type": "integer"
          },
          "relation": {
            "type": "integer"
          }
        }
      },
      "PatchedRelationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          }
        }
      },
      "PatchedSettingsRequest": {
        "type": "object",
        "properties": {
          "face_confidence_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Face similarity threshold"
          },
          "body_confidence_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Body similarity threshold"
          },
          "car_confidence_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Car similarity threshold"
          },
          "face_episodes_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Human episodes face threshold"
          },
          "body_episodes_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Human episodes body threshold"
          },
          "car_episodes_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Car episodes car threshold"
          },
          "minimum_face_quality": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": -20.0,
            "description": "Minimum face quality for inclusion in a card"
          },
          "minimum_car_quality": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": -20.0,
            "description": "Minimum car quality for inclusion in a card"
          },
          "minimum_body_quality": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": -20.0,
            "description": "Minimum body quality for inclusion in a card"
          },
          "ignore_unmatched": {
            "type": "boolean",
            "description": "If enabled, unmatched events won't be saved to the database"
          },
          "license_accepted": {
            "type": "boolean",
            "description": "By setting this option to \"true\", you indicate that you have read and accepted the FindFace Security         license agreement."
          },
          "face_events_max_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Matched face events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "face_events_max_unmatched_age": {
            "type": "integer",
            "minimum": 0,
            "description": "Unmatched face events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "face_events_max_fullframe_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from matched face events older than `events_max_fullframe_matched_age` will be removed every night by the cleanup script"
          },
          "face_events_max_fullframe_unmatched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from unmatched face events older than `events_max_fullframe_unmatched_age` will be removed every night by the cleanup script"
          },
          "face_cluster_events_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Face cluster events older than `face_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "face_cluster_events_keep_best_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Face cluster events except of best cluster event older than `face_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "car_events_max_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Matched car events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "car_events_max_unmatched_age": {
            "type": "integer",
            "minimum": 0,
            "description": "Unmatched car events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "car_events_max_fullframe_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from matched car events older than `events_max_fullframe_matched_age` will be removed every night by the cleanup script"
          },
          "car_events_max_fullframe_unmatched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from unmatched car events older than `events_max_fullframe_unmatched_age` will be removed every night by the cleanup script"
          },
          "car_cluster_events_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Car cluster events older than `car_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "car_cluster_events_keep_best_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Car cluster events except of best cluster event older than `car_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "body_events_max_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Matched body events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "body_events_max_unmatched_age": {
            "type": "integer",
            "minimum": 0,
            "description": "Unmatched body events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "body_events_max_fullframe_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from matched body events older than `events_max_fullframe_matched_age` will be removed every night by the cleanup script"
          },
          "body_events_max_fullframe_unmatched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from unmatched body events older than `events_max_fullframe_unmatched_age` will be removed every night by the cleanup script"
          },
          "body_cluster_events_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Body cluster events older than `body_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "body_cluster_events_keep_best_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Body cluster events except of best cluster event older than `body_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "face_events_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaceEventsFeaturesEnum"
            },
            "description": "Features to extract when creating face events"
          },
          "body_events_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BodyEventsFeaturesEnum"
            },
            "description": "Features to extract when creating body events"
          },
          "car_events_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarEventsFeaturesEnum"
            },
            "description": "Features to extract when creating car events"
          },
          "liveness_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Liveness classifier threshold (if liveness is enabled)"
          },
          "thumbnail_jpeg_quality": {
            "type": "integer",
            "maximum": 95,
            "minimum": 50,
            "description": "Thumbnail JPEG quality, default is 75"
          },
          "vms_cleanup_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VmsCleanupSettingsRequest"
              }
            ],
            "nullable": true,
            "default": {
              "archive_cleanup_age": null
            }
          }
        }
      },
      "PatchedUpdateDeviceBlacklistRecordRequest": {
        "type": "object",
        "properties": {
          "expire_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Record expiration date"
          },
          "reason": {
            "type": "string",
            "minLength": 1,
            "description": "Blacklisting reason, up to 512 characters",
            "maxLength": 512
          }
        }
      },
      "PatchedUpdateMetaDictionaryRequest": {
        "type": "object",
        "description": "`MetaDictionary` is a collection of values from which you can select a meta value",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short dictionary name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          }
        }
      },
      "PatchedUserFaceUpdateRequest": {
        "type": "object",
        "properties": {
          "frame_coords_left": {
            "type": "integer",
            "description": "Left border of object's bounding box"
          },
          "frame_coords_top": {
            "type": "integer",
            "description": "Top border of object's bounding box"
          },
          "frame_coords_right": {
            "type": "integer",
            "description": "Right border of object's bounding box"
          },
          "frame_coords_bottom": {
            "type": "integer",
            "description": "Bottom border of object's bounding box"
          },
          "user": {
            "type": "integer",
            "description": "Related `User` ID"
          }
        }
      },
      "PatchedUserRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "real_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "comment": {
            "type": "string",
            "description": "Extended description of the user, up to 2048 chars",
            "maxLength": 2048
          },
          "primary_group": {
            "type": "integer"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LanguageEnum"
              }
            ],
            "description": "Backend message language for the user"
          },
          "face_cover": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 32
          }
        }
      },
      "PatchedVideoArchiveRequest": {
        "type": "object",
        "properties": {
          "camera_group": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 256
          },
          "url": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "camera": {
            "type": "integer",
            "nullable": true
          },
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettingsRequest"
          },
          "case": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "PatchedWatchListPermissionsRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "PatchedWatchListRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "`true` if a watch list is enabled"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short watch list name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "color": {
            "type": "string",
            "minLength": 1,
            "description": "Color of the object label in hex",
            "maxLength": 6
          },
          "notify": {
            "type": "boolean",
            "description": "`true` if the notifications on the watch list enabled"
          },
          "acknowledge": {
            "type": "boolean",
            "description": "Require manual acknowledgment of the events that match with the watch list"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of the camera groups used to monitor the watch list "
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list car confidence threshold"
          },
          "ignore_events": {
            "type": "boolean",
            "description": "Events won't be created if set to True"
          },
          "send_events_to_external_vms": {
            "type": "boolean",
            "description": "`true` if events matched with this watch list should be sent to an external VMS"
          },
          "active_after": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disable_schedule": {
            "$ref": "#/components/schemas/ScheduleRequest"
          },
          "origin": {
            "type": "string",
            "minLength": 1,
            "description": "bit",
            "maxLength": 256
          }
        }
      },
      "PatchedWebhookRequest": {
        "type": "object",
        "description": "`WebHook` is an HTTP URL that is used to notify external services on newly created events",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "Human-readable name for this webhook",
            "maxLength": 100
          },
          "active": {
            "type": "boolean",
            "description": "Inactive webhooks will not send any requests"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "minLength": 1,
            "description": "Receiving URL",
            "maxLength": 300
          },
          "batch_size": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Webhook messages batch size"
          },
          "filters": {
            "$ref": "#/components/schemas/WebhookFiltersRequest"
          },
          "send_attempts": {
            "type": "integer",
            "minimum": 0,
            "default": 10,
            "description": "Maximum number of attempts to send a webhook"
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "codename": {
            "type": "string",
            "readOnly": true
          },
          "permission_id": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "codename",
          "id",
          "name",
          "permission_id"
        ]
      },
      "PicturesEnum": {
        "enum": [
          "fullframe",
          "thumbnail",
          "link"
        ],
        "type": "string"
      },
      "ProfileTokenRequest": {
        "type": "object",
        "properties": {
          "profile_token": {
            "type": "string",
            "minLength": 1,
            "description": "ONVIF media profile token"
          }
        },
        "required": [
          "profile_token"
        ]
      },
      "ProximityCalibrationStatusEnum": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer"
      },
      "PurgeAllResponse": {
        "type": "object",
        "properties": {
          "deleted_count": {
            "type": "integer"
          }
        },
        "required": [
          "deleted_count"
        ]
      },
      "Relation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Cards relation creation date"
          }
        },
        "required": [
          "created_date",
          "id",
          "name"
        ]
      },
      "RelationHumanCardLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "RelationLink creation date"
          },
          "card": {
            "type": "integer"
          },
          "relation": {
            "type": "integer"
          }
        },
        "required": [
          "card",
          "created_date",
          "id",
          "name",
          "relation"
        ]
      },
      "RelationHumanCardLinkRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "card": {
            "type": "integer"
          },
          "relation": {
            "type": "integer"
          }
        },
        "required": [
          "card",
          "name",
          "relation"
        ]
      },
      "RelationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          }
        },
        "required": [
          "name"
        ]
      },
      "Report": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Cluster event creation date"
          },
          "name": {
            "type": "string",
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Cluster event modification date"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReportStatusEnum"
              }
            ],
            "readOnly": true,
            "description": "Processing status"
          },
          "type": {
            "$ref": "#/components/schemas/TypeEnum"
          },
          "pictures": {
            "$ref": "#/components/schemas/PicturesEnum"
          },
          "records_number": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of records in report"
          },
          "report_format": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportFormatEnum"
            },
            "description": "Report formats"
          },
          "size": {
            "type": "integer",
            "readOnly": true,
            "description": "Report size in bytes"
          },
          "report_file_xls": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "report_file_json": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "report_file_csv": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Filters available for the passed entity `type` can be used. Filters list can be found in the list endpoint of entity type"
          },
          "origin": {
            "type": "string",
            "readOnly": true,
            "description": "User request origin"
          },
          "owner": {
            "type": "integer",
            "readOnly": true,
            "description": "User id"
          },
          "meta": {
            "$ref": "#/components/schemas/ReportMeta"
          }
        },
        "required": [
          "created_date",
          "filters",
          "id",
          "modified_date",
          "origin",
          "owner",
          "pictures",
          "records_number",
          "report_file_csv",
          "report_file_json",
          "report_file_xls",
          "report_format",
          "size",
          "status",
          "type"
        ]
      },
      "ReportFormatEnum": {
        "enum": [
          "xls",
          "json",
          "csv"
        ],
        "type": "string"
      },
      "ReportMeta": {
        "type": "object",
        "properties": {
          "cameras_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "description": "In-cameras for `face-events-in-out` and `face-cluster-events-in-out` reports"
          },
          "cameras_out": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "description": "Out-cameras for `face-events-in-out` and `face-cluster-events-in-out` reports"
          }
        }
      },
      "ReportMetaRequest": {
        "type": "object",
        "properties": {
          "cameras_in": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "description": "In-cameras for `face-events-in-out` and `face-cluster-events-in-out` reports"
          },
          "cameras_out": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "description": "Out-cameras for `face-events-in-out` and `face-cluster-events-in-out` reports"
          }
        }
      },
      "ReportRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "type": {
            "$ref": "#/components/schemas/TypeEnum"
          },
          "pictures": {
            "$ref": "#/components/schemas/PicturesEnum"
          },
          "report_format": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportFormatEnum"
            },
            "description": "Report formats"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Filters available for the passed entity `type` can be used. Filters list can be found in the list endpoint of entity type"
          },
          "meta": {
            "$ref": "#/components/schemas/ReportMetaRequest"
          }
        },
        "required": [
          "filters",
          "pictures",
          "report_format",
          "type"
        ]
      },
      "ReportStatusEnum": {
        "enum": [
          "scheduled",
          "processing",
          "error",
          "completed"
        ],
        "type": "string"
      },
      "ResolutionSeriazlierRequest": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "height",
          "width"
        ]
      },
      "Schedule": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "monday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "tuesday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "wednesday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "thursday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "friday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "saturday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "sunday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "ScheduleRequest": {
        "type": "object",
        "description": "Serializer mixin that raises ValidationError if excess fields are presented.\nCan be used in nested serializers",
        "properties": {
          "monday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "tuesday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "wednesday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "thursday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "friday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "saturday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "sunday": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "Settings": {
        "type": "object",
        "properties": {
          "face_confidence_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Face similarity threshold"
          },
          "body_confidence_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Body similarity threshold"
          },
          "car_confidence_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Car similarity threshold"
          },
          "face_episodes_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Human episodes face threshold"
          },
          "body_episodes_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Human episodes body threshold"
          },
          "car_episodes_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Car episodes car threshold"
          },
          "minimum_face_quality": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": -20.0,
            "description": "Minimum face quality for inclusion in a card"
          },
          "minimum_car_quality": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": -20.0,
            "description": "Minimum car quality for inclusion in a card"
          },
          "minimum_body_quality": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": -20.0,
            "description": "Minimum body quality for inclusion in a card"
          },
          "ignore_unmatched": {
            "type": "boolean",
            "description": "If enabled, unmatched events won't be saved to the database"
          },
          "license_accepted": {
            "type": "boolean",
            "description": "By setting this option to \"true\", you indicate that you have read and accepted the FindFace Security         license agreement."
          },
          "face_events_max_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Matched face events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "face_events_max_unmatched_age": {
            "type": "integer",
            "minimum": 0,
            "description": "Unmatched face events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "face_events_max_fullframe_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from matched face events older than `events_max_fullframe_matched_age` will be removed every night by the cleanup script"
          },
          "face_events_max_fullframe_unmatched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from unmatched face events older than `events_max_fullframe_unmatched_age` will be removed every night by the cleanup script"
          },
          "face_cluster_events_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Face cluster events older than `face_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "face_cluster_events_keep_best_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Face cluster events except of best cluster event older than `face_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "car_events_max_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Matched car events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "car_events_max_unmatched_age": {
            "type": "integer",
            "minimum": 0,
            "description": "Unmatched car events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "car_events_max_fullframe_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from matched car events older than `events_max_fullframe_matched_age` will be removed every night by the cleanup script"
          },
          "car_events_max_fullframe_unmatched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from unmatched car events older than `events_max_fullframe_unmatched_age` will be removed every night by the cleanup script"
          },
          "car_cluster_events_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Car cluster events older than `car_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "car_cluster_events_keep_best_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Car cluster events except of best cluster event older than `car_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "body_events_max_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Matched body events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "body_events_max_unmatched_age": {
            "type": "integer",
            "minimum": 0,
            "description": "Unmatched body events older than `events_max_age` will be removed every night by the cleanup script"
          },
          "body_events_max_fullframe_matched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from matched body events older than `events_max_fullframe_matched_age` will be removed every night by the cleanup script"
          },
          "body_events_max_fullframe_unmatched_age": {
            "type": "integer",
            "nullable": true,
            "description": "Fullframes from unmatched body events older than `events_max_fullframe_unmatched_age` will be removed every night by the cleanup script"
          },
          "body_cluster_events_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Body cluster events older than `body_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "body_cluster_events_keep_best_max_age": {
            "type": "integer",
            "nullable": true,
            "description": "Body cluster events except of best cluster event older than `body_cluster_events_max_age` will be removed every night by the cleanup script"
          },
          "face_events_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaceEventsFeaturesEnum"
            },
            "description": "Features to extract when creating face events"
          },
          "body_events_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BodyEventsFeaturesEnum"
            },
            "description": "Features to extract when creating body events"
          },
          "car_events_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarEventsFeaturesEnum"
            },
            "description": "Features to extract when creating car events"
          },
          "liveness_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "description": "Liveness classifier threshold (if liveness is enabled)"
          },
          "thumbnail_jpeg_quality": {
            "type": "integer",
            "maximum": 95,
            "minimum": 50,
            "description": "Thumbnail JPEG quality, default is 75"
          },
          "vms_cleanup_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VmsCleanupSettings"
              }
            ],
            "nullable": true,
            "default": {
              "keep_events_before_after": 10,
              "cleanup_threshold": 360,
              "cleanup_between_tracks": true,
              "cleanup_events_types": [
                "face"
              ],
              "cleanup_archive": false,
              "archive_cleanup_age": null
            }
          }
        },
        "required": [
          "body_cluster_events_keep_best_max_age",
          "body_cluster_events_max_age",
          "body_confidence_threshold",
          "body_episodes_threshold",
          "body_events_features",
          "body_events_max_fullframe_matched_age",
          "body_events_max_fullframe_unmatched_age",
          "body_events_max_matched_age",
          "body_events_max_unmatched_age",
          "car_cluster_events_keep_best_max_age",
          "car_cluster_events_max_age",
          "car_confidence_threshold",
          "car_episodes_threshold",
          "car_events_features",
          "car_events_max_fullframe_matched_age",
          "car_events_max_fullframe_unmatched_age",
          "car_events_max_matched_age",
          "car_events_max_unmatched_age",
          "face_cluster_events_keep_best_max_age",
          "face_cluster_events_max_age",
          "face_confidence_threshold",
          "face_episodes_threshold",
          "face_events_features",
          "face_events_max_fullframe_matched_age",
          "face_events_max_fullframe_unmatched_age",
          "face_events_max_matched_age",
          "face_events_max_unmatched_age",
          "ignore_unmatched",
          "license_accepted",
          "liveness_threshold",
          "minimum_body_quality",
          "minimum_car_quality",
          "minimum_face_quality",
          "thumbnail_jpeg_quality"
        ]
      },
      "Status": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "`true` for the camera enabled through findface-video-manager"
          },
          "status": {
            "type": "string",
            "description": "Status code"
          },
          "msg": {
            "type": "string",
            "description": "Status description"
          },
          "statistic": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Various findface-video-worker statistics"
          },
          "code": {
            "type": "string",
            "description": "`Status` color code for UI."
          },
          "code_desc": {
            "type": "string",
            "description": "`Status` description for UI."
          }
        },
        "required": [
          "code",
          "code_desc",
          "enabled",
          "msg",
          "statistic",
          "status"
        ]
      },
      "StatusRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "`true` for the camera enabled through findface-video-manager"
          },
          "status": {
            "type": "string",
            "minLength": 1,
            "description": "Status code"
          },
          "msg": {
            "type": "string",
            "description": "Status description"
          },
          "statistic": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Various findface-video-worker statistics"
          },
          "code": {
            "type": "string",
            "minLength": 1,
            "description": "`Status` color code for UI."
          },
          "code_desc": {
            "type": "string",
            "minLength": 1,
            "description": "`Status` description for UI."
          }
        },
        "required": [
          "code",
          "code_desc",
          "enabled",
          "msg",
          "statistic",
          "status"
        ]
      },
      "Timeline": {
        "type": "object",
        "properties": {
          "time_from": {
            "type": "string",
            "format": "date-time",
            "description": "Period start date  (UTC)"
          },
          "time_to": {
            "type": "string",
            "format": "date-time",
            "description": "Period start end (UTC)"
          }
        },
        "required": [
          "time_from",
          "time_to"
        ]
      },
      "TypeEnum": {
        "enum": [
          "face-events",
          "face-events-in-out",
          "body-events",
          "car-events",
          "human-episodes",
          "car-episodes",
          "face-clusters",
          "body-clusters",
          "car-clusters",
          "face-cluster-events",
          "face-cluster-events-in-out",
          "body-cluster-events",
          "car-cluster-events",
          "human-cards",
          "car-cards",
          "kyc",
          "cameras",
          "counters",
          "areas",
          "area-activations",
          "area-activations-in-out",
          "area-activation-records-in-out",
          "area-records",
          "audit-logs",
          "trigger-events"
        ],
        "type": "string"
      },
      "UpdateDeviceBlacklistRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Record creation date"
          },
          "expire_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Record expiration date"
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "description": "Device unique identifier"
          },
          "reason": {
            "type": "string",
            "description": "Blacklisting reason, up to 512 characters",
            "maxLength": 512
          }
        },
        "required": [
          "created_date",
          "id",
          "reason",
          "uuid"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "active": {
            "type": "boolean"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "real_name": {
            "type": "string",
            "maxLength": 80
          },
          "name": {
            "type": "string",
            "maxLength": 80
          },
          "comment": {
            "type": "string",
            "description": "Extended description of the user, up to 2048 chars",
            "maxLength": 2048
          },
          "camera_group_permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "watch_list_permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "group_permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "primary_group": {
            "type": "integer"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LanguageEnum"
              }
            ],
            "description": "Backend message language for the user"
          },
          "has_face": {
            "type": "boolean",
            "readOnly": true,
            "description": "User photo is provided"
          },
          "face_cover": {
            "type": "string",
            "nullable": true,
            "maxLength": 32
          },
          "ad_user": {
            "type": "boolean",
            "readOnly": true,
            "description": "User is registered in Active Directory"
          }
        },
        "required": [
          "active",
          "ad_user",
          "camera_group_permissions",
          "created_date",
          "group_permissions",
          "has_face",
          "id",
          "modified_date",
          "name",
          "permissions",
          "primary_group",
          "real_name",
          "watch_list_permissions"
        ]
      },
      "UserFaceRequest": {
        "type": "object",
        "properties": {
          "create_from": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "This field can contain one of the following references:\n- `detection:<detection id>`: use a `Detection` object (obtained with the `POST /detect`)\n  to select a object on `source_photo`.\n  (`source_photo` must contain the same image that was used for `POST /detect`)\n- `{face, body, or car}event:<event id>`: create new `Object` from an `Event`\n  (`source_photo` must be empty)\n- `{face, body, or car}object:<object id>`: use another `Object` as a template for this object\n  (`source_photo` must be empty)\n"
          },
          "detect_id": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1,
            "description": "*This parameter is left only for compatibility reasons. Do not use it.*"
          },
          "mf_selector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MfSelectorA85Enum"
              }
            ],
            "writeOnly": true,
            "default": "reject",
            "description": "This parameter defines the FF.Multi default behaviour when there are multiple objects are present in\n`source_photo`, and `create_from` is not set.\n\n- `reject` - Reject `source_photo` with multiple objects\n- `biggest` - Select the biggest object in `source_photo`\n"
          },
          "source_photo": {
            "type": "string",
            "format": "binary",
            "description": "Source photo (**required** when `create_from` points to a `Detection` or empty)"
          },
          "frame_coords_left": {
            "type": "integer",
            "description": "Left border of object's bounding box"
          },
          "frame_coords_top": {
            "type": "integer",
            "description": "Top border of object's bounding box"
          },
          "frame_coords_right": {
            "type": "integer",
            "description": "Right border of object's bounding box"
          },
          "frame_coords_bottom": {
            "type": "integer",
            "description": "Bottom border of object's bounding box"
          },
          "user": {
            "type": "integer",
            "description": "Related `User` ID"
          }
        },
        "required": [
          "user"
        ]
      },
      "UserFaceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "source_photo_name": {
            "type": "string",
            "readOnly": true,
            "description": "Filename supplied for `source_photo` on object creation"
          },
          "frame_coords_left": {
            "type": "integer",
            "description": "Left border of object's bounding box"
          },
          "frame_coords_top": {
            "type": "integer",
            "description": "Top border of object's bounding box"
          },
          "frame_coords_right": {
            "type": "integer",
            "description": "Right border of object's bounding box"
          },
          "frame_coords_bottom": {
            "type": "integer",
            "description": "Bottom border of object's bounding box"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Object thumbnail"
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "readOnly": true
          },
          "user": {
            "type": "integer",
            "description": "Related `User` ID"
          }
        },
        "required": [
          "created_date",
          "features",
          "id",
          "modified_date",
          "source_photo_name",
          "thumbnail",
          "user"
        ]
      },
      "UserLevelEnum": {
        "enum": [
          "Administrator",
          "Operator",
          "User"
        ],
        "type": "string"
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "real_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80
          },
          "comment": {
            "type": "string",
            "description": "Extended description of the user, up to 2048 chars",
            "maxLength": 2048
          },
          "primary_group": {
            "type": "integer"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LanguageEnum"
              }
            ],
            "description": "Backend message language for the user"
          },
          "face_cover": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 32
          }
        },
        "required": [
          "active",
          "name",
          "password",
          "primary_group",
          "real_name"
        ]
      },
      "VMSArchiveResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "ws",
            "description": "Type of the video url"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Video stream url"
          }
        },
        "required": [
          "url"
        ]
      },
      "VMSTimelineResponse": {
        "type": "object",
        "properties": {
          "timeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Timeline"
            }
          }
        },
        "required": [
          "timeline"
        ]
      },
      "VerboseRelationHumanCardLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Short name, up to 256 characters",
            "maxLength": 256
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "RelationLink creation date"
          },
          "card": {
            "type": "integer"
          },
          "relation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Relation"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "card",
          "created_date",
          "id",
          "name",
          "relation"
        ]
      },
      "VerifyResult": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "number",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "description": "Face similarity score"
          }
        },
        "required": [
          "confidence"
        ]
      },
      "VideoArchive": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "camera_group": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 256
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "camera": {
            "type": "integer",
            "nullable": true
          },
          "processing_start_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Video processing start date"
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "Processing is active"
          },
          "screenshot": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Screenshot URL"
          },
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettings"
          },
          "source_len": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "description": "Source length in seconds"
          },
          "health_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "readOnly": true
          },
          "finished": {
            "type": "boolean",
            "readOnly": true,
            "description": "`true` if the video processing is finished"
          },
          "queued": {
            "type": "boolean",
            "readOnly": true,
            "description": "`true` if the video is in the processing queue"
          },
          "face_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of created faces"
          },
          "file_size": {
            "type": "integer",
            "readOnly": true,
            "description": "Video file size in the archive"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "body_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of created bodies"
          },
          "car_count": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of created cars"
          },
          "case": {
            "type": "integer",
            "nullable": true
          },
          "face_cluster_count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Count of face clusters created from this video"
          },
          "body_cluster_count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Count of body clusters created from this video"
          },
          "car_cluster_count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Count of car clusters created from this video"
          }
        },
        "required": [
          "active",
          "body_cluster_count",
          "body_count",
          "camera_group",
          "car_cluster_count",
          "car_count",
          "created_date",
          "face_cluster_count",
          "face_count",
          "file_size",
          "finished",
          "health_status",
          "id",
          "name",
          "processing_start_date",
          "queued",
          "screenshot",
          "source_len"
        ]
      },
      "VideoArchiveRequest": {
        "type": "object",
        "properties": {
          "camera_group": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "maxLength": 256
          },
          "url": {
            "type": "string",
            "nullable": true,
            "minLength": 1
          },
          "camera": {
            "type": "integer",
            "nullable": true
          },
          "stream_settings": {
            "$ref": "#/components/schemas/CameraStreamSettingsRequest"
          },
          "case": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "camera_group",
          "name"
        ]
      },
      "VideoAuthRenewRequestRequest": {
        "type": "object",
        "properties": {
          "video": {
            "type": "string",
            "format": "binary",
            "description": "User video"
          }
        },
        "required": [
          "video"
        ]
      },
      "VideoAuthRenewResponse": {
        "type": "object",
        "properties": {
          "token_expiration_datetime": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiration datetime"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "description": "User info"
          }
        },
        "required": [
          "token_expiration_datetime",
          "user"
        ]
      },
      "VideoAuthRequestRequest": {
        "type": "object",
        "properties": {
          "video": {
            "type": "string",
            "format": "binary",
            "description": "User video"
          },
          "uuid": {
            "type": "string",
            "minLength": 1,
            "description": "Device unique identifier",
            "maxLength": 256
          },
          "mobile": {
            "type": "boolean",
            "default": false,
            "description": "Device is mobile"
          },
          "device_info": {
            "type": "object",
            "additionalProperties": {
              "type": "str┃int┃float┃bool┃object┃array┃null"
            },
            "description": "Device information"
          }
        },
        "required": [
          "uuid",
          "video"
        ]
      },
      "VmsCleanupSettings": {
        "type": "object",
        "properties": {
          "keep_events_before_after": {
            "type": "integer",
            "minimum": 10,
            "nullable": true,
            "description": "interval in `seconds` to be added to track"
          },
          "cleanup_threshold": {
            "type": "integer",
            "minimum": 360,
            "nullable": true,
            "description": "cleanup threshold  in `seconds` between tracks that will not be deleted"
          },
          "cleanup_archive": {
            "type": "boolean",
            "nullable": true
          },
          "archive_cleanup_age": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "max age of archive to delete"
          },
          "cleanup_between_tracks": {
            "type": "boolean",
            "nullable": true
          },
          "cleanup_events_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "tracks with event types to be deleted"
          }
        }
      },
      "VmsCleanupSettingsRequest": {
        "type": "object",
        "properties": {
          "keep_events_before_after": {
            "type": "integer",
            "minimum": 10,
            "nullable": true,
            "description": "interval in `seconds` to be added to track"
          },
          "cleanup_threshold": {
            "type": "integer",
            "minimum": 360,
            "nullable": true,
            "description": "cleanup threshold  in `seconds` between tracks that will not be deleted"
          },
          "cleanup_archive": {
            "type": "boolean",
            "nullable": true
          },
          "archive_cleanup_age": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "description": "max age of archive to delete"
          },
          "cleanup_between_tracks": {
            "type": "boolean",
            "nullable": true
          },
          "cleanup_events_types": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "nullable": true,
            "description": "tracks with event types to be deleted"
          }
        }
      },
      "WatchList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Object modification date"
          },
          "active": {
            "type": "boolean",
            "description": "`true` if a watch list is enabled"
          },
          "name": {
            "type": "string",
            "description": "Short watch list name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "color": {
            "type": "string",
            "description": "Color of the object label in hex",
            "maxLength": 6
          },
          "notify": {
            "type": "boolean",
            "description": "`true` if the notifications on the watch list enabled"
          },
          "acknowledge": {
            "type": "boolean",
            "description": "Require manual acknowledgment of the events that match with the watch list"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of the camera groups used to monitor the watch list "
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list car confidence threshold"
          },
          "ignore_events": {
            "type": "boolean",
            "description": "Events won't be created if set to True"
          },
          "send_events_to_external_vms": {
            "type": "boolean",
            "description": "`true` if events matched with this watch list should be sent to an external VMS"
          },
          "active_after": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disable_schedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "recount_schedule_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "origin": {
            "type": "string",
            "description": "bit",
            "maxLength": 256
          }
        },
        "required": [
          "created_date",
          "id",
          "modified_date",
          "name",
          "recount_schedule_on"
        ]
      },
      "WatchListPermissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Short watch list name, up to 256 characters"
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "WatchListRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "`true` if a watch list is enabled"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Short watch list name, up to 256 characters",
            "maxLength": 256
          },
          "comment": {
            "type": "string",
            "description": "Extended description, up to 2048 characters",
            "maxLength": 2048
          },
          "color": {
            "type": "string",
            "minLength": 1,
            "description": "Color of the object label in hex",
            "maxLength": 6
          },
          "notify": {
            "type": "boolean",
            "description": "`true` if the notifications on the watch list enabled"
          },
          "acknowledge": {
            "type": "boolean",
            "description": "Require manual acknowledgment of the events that match with the watch list"
          },
          "camera_groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of the camera groups used to monitor the watch list "
          },
          "face_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list face confidence threshold"
          },
          "body_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list body confidence threshold"
          },
          "car_threshold": {
            "type": "number",
            "format": "float",
            "maximum": 1.0,
            "minimum": 0.0,
            "nullable": true,
            "description": "Watch list car confidence threshold"
          },
          "ignore_events": {
            "type": "boolean",
            "description": "Events won't be created if set to True"
          },
          "send_events_to_external_vms": {
            "type": "boolean",
            "description": "`true` if events matched with this watch list should be sent to an external VMS"
          },
          "active_after": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disable_schedule": {
            "$ref": "#/components/schemas/ScheduleRequest"
          },
          "origin": {
            "type": "string",
            "minLength": 1,
            "description": "bit",
            "maxLength": 256
          }
        },
        "required": [
          "name"
        ]
      },
      "Webhook": {
        "type": "object",
        "description": "`WebHook` is an HTTP URL that is used to notify external services on newly created events",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for this webhook",
            "maxLength": 100,
            "minLength": 2
          },
          "active": {
            "type": "boolean",
            "description": "Inactive webhooks will not send any requests"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Receiving URL",
            "maxLength": 300
          },
          "batch_size": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Webhook messages batch size"
          },
          "filters": {
            "$ref": "#/components/schemas/WebhookFilters"
          },
          "send_attempts": {
            "type": "integer",
            "minimum": 0,
            "default": 10,
            "description": "Maximum number of attempts to send a webhook"
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "description": "Creator ID"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Webhook creation date"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Webhook modification date"
          }
        },
        "required": [
          "active",
          "created_by",
          "created_date",
          "filters",
          "id",
          "modified_date",
          "name",
          "url"
        ]
      },
      "WebhookFilters": {
        "type": "object",
        "properties": {
          "face_events": {
            "$ref": "#/components/schemas/FaceEventsFilters"
          },
          "body_events": {
            "$ref": "#/components/schemas/BodyEventsFilters"
          },
          "car_events": {
            "$ref": "#/components/schemas/CarEventsFilters"
          },
          "human_episodes": {
            "$ref": "#/components/schemas/HumanEpisodesFilters"
          },
          "car_episodes": {
            "$ref": "#/components/schemas/CarEpisodesFilters"
          },
          "counters": {
            "$ref": "#/components/schemas/CounterFilters"
          },
          "areas": {
            "$ref": "#/components/schemas/AreasFilters"
          }
        }
      },
      "WebhookFiltersRequest": {
        "type": "object",
        "properties": {
          "face_events": {
            "$ref": "#/components/schemas/FaceEventsFiltersRequest"
          },
          "body_events": {
            "$ref": "#/components/schemas/BodyEventsFiltersRequest"
          },
          "car_events": {
            "$ref": "#/components/schemas/CarEventsFiltersRequest"
          },
          "human_episodes": {
            "$ref": "#/components/schemas/HumanEpisodesFiltersRequest"
          },
          "car_episodes": {
            "$ref": "#/components/schemas/CarEpisodesFiltersRequest"
          },
          "counters": {
            "$ref": "#/components/schemas/CounterFiltersRequest"
          },
          "areas": {
            "$ref": "#/components/schemas/AreasFiltersRequest"
          }
        }
      },
      "WebhookRequest": {
        "type": "object",
        "description": "`WebHook` is an HTTP URL that is used to notify external services on newly created events",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "Human-readable name for this webhook",
            "maxLength": 100
          },
          "active": {
            "type": "boolean",
            "description": "Inactive webhooks will not send any requests"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "minLength": 1,
            "description": "Receiving URL",
            "maxLength": 300
          },
          "batch_size": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "Webhook messages batch size"
          },
          "filters": {
            "$ref": "#/components/schemas/WebhookFiltersRequest"
          },
          "send_attempts": {
            "type": "integer",
            "minimum": 0,
            "default": 10,
            "description": "Maximum number of attempts to send a webhook"
          }
        },
        "required": [
          "active",
          "filters",
          "name",
          "url"
        ]
      },
      "WeekdaysEnum": {
        "enum": [
          "Mon",
          "Tue",
          "Wed",
          "Thu",
          "Fri",
          "Sat",
          "Sun"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Use `/auth/login` to obtain a valid `token` and paste it in this form: ```Token <token>```"
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}